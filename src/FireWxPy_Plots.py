# THIS SCRIPT PLOTS VARIOUS DATASETS THROUGH VARIOUS DIFFERENT FUNCTIONS
#
# THIS IS THE NWS FTP DATA ACCESS FILE FOR FireWxPy
#
# DEPENDENCIES INCLUDE:
# 1. MATPLOTLIB
# 2. DATETIME
# 3. PYTZ
# 4. CARTOPY
# 5. METPY
#
#  (C) METEOROLOGIST ERIC J. DREWITZ
#               USDA/USFS

#### IMPORTS ####

import pytz
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import cartopy.feature as cfeature
import metpy.plots as mpplots
import metpy.calc as mpcalc
import numpy as np
import parsers
import data_access as da
import geometry
import calc

from matplotlib.patheffects import withStroke
from metpy.plots import USCOUNTIES
from datetime import datetime, timedelta
from metpy.plots import colortables

class standard:

    r'''

    THIS CLASS HOSTS STANDARD FUNCTIONS TO GET THE PLOT CREATION TIME IN UTC AND LOCAL AS WELL AS A GENERIC "NO DATA" IMAGE WHICH IS TO BE RETURNED IF THERE IS NO DATA. 

    '''
        

    def plot_creation_time():
        r'''
        FUNCTION TO GET THE CURRENT DATE/TIME FOR PLOT HEADER/FOOTER
    
        RETURNS VALUES IN THE ORDER OF:
        1. CURRENT LOCAL DATE/TIME
        2. CURRENT UTC DATE/TIME
    
        PYTHON MODULE DEPENDENCIES:
        1. DATETIME
        2. PYTZ
        
        COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
        '''
    
        now = datetime.now()
        UTC = now.astimezone(pytz.utc)
        
        sec = now.second
        mn = now.minute
        hr = now.hour
        dy = now.day
        mon = now.month
        yr = now.year
        
        sec1 = UTC.second
        mn1 = UTC.minute
        hr1 = UTC.hour
        dy1 = UTC.day
        mon1 = UTC.month
        yr1 = UTC.year
        
        Local_Time_Now = datetime(yr, mon, dy, hr, mn, sec)
        UTC_Now = datetime(yr1, mon1, dy1, hr1, mn1, sec1)
        
        return Local_Time_Now, UTC_Now
    
    
    def no_data_graphic():
        r'''
        THIS FUNCTION RETURNS A DEFAULT GRAPHIC WHEN NO DATA IS PRESENT
    
        COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
        '''
        local_time, utc_time = standard.plot_creation_time()
        
        fig = plt.figure(figsize=(10,10))
        ax = plt.subplot(1, 1, 1)
        plt.axis('off')
        fig.text(0.25, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontsize=20, fontweight='bold')
        ax.text(0.40, 0.6, 'NO DATA FOR: ' + utc_time.strftime('%m/%d/%Y %HZ'), fontsize=60, fontweight='bold')
    
        return fig

class National_Weather_Service_Forecast_Counties_Perspective:

    r'''

    THIS CLASS HOSTS A VARIETY OF PLOTTING FUNCTIONS. 

    THESE FUNCTIONS PLOT THE NATIONAL WEATHER SERVICE GRIDDED FORECAST DATA IN VARIOUS DIFFERENT WAYS

    GENERIC FORECAST FUNCTIONS OFFER SLIGHTLY MORE CUSTOMIZATION AS BOTH THE GENERIC FUNCTIONS ARE NOT PRESETS FOR A CERTAIN WEATHER ELEMENT. 

    THIS CLASS PLOTS THE DATA USING COUNTY AND STATE BOUNDARIES AS A REFERENCE POINT. 

    (C) METEOROLOGIST ERIC J. DREWITZ 2023


    '''


    def plot_generic_short_term_forecast(directory_name, parameter, grid_time_interval, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, color_table, color_table_start, color_table_stop, color_table_step, plot_title, sub_plot_1_title, sub_plot_2_title, sub_plot_3_title, sub_plot_4_title, sub_plot_5_title, fig_x_length, fig_y_length, color_bar_shrink): 
    
        r'''
        THIS FUNCTION MAKES A GENERIC CUSTOMIZED PLOT OF THE LATEST SHORT-TERM NOAA/NWS NDFD GRID FORECAST DATA
    
        THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
        1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
        2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        3. WEATHER PARAMETER 
        4. COLOR TABLE FOR PLOT 
        5. COLOR TABLE START, STOP AND STEP
        6. GRID TIME INTERVALS IN HOURS (DIFFERENT GRIDS ARE DIFFERENT LENGTHS IN TIME)
        7. PLOT TITLE - TITLE MUST BE ENTERED AS A STRING VARIABLE
        8. COLORBAR SHRINK - FLOAT VARIABLE THAT DETERMINES THE SIZE OF THE COLORBAR. THE DEFAULT IS 1.0. TO SHRINK THE SIZE OF THE COLORBAR SET SHRINK TO A FLOAT VALUE BETWEEN 0 AND 1. TO INCREASE THE SIZE OF THE COLORBAR SET THE SHRINK VALUE TO ABOVE 1. 
        9. FIGURE SIZE IS CUSTOMIZED BY THE INTEGER VARIABLES (fig_x_length, fig_y_length) IF YOUR PLOT COMES OUT LOOKING FUNKY (I.E. WORDS OVERLAPPING, COLORBARS NOT SIZED PROPERLY EVEN AFTER YOU EDIT THE SIZE OF THE COLORBAR SHRINK ETC.), EDIT THE SIZE OF THE FIGURE SIZE
    
        PYTHON MODULE DEPENDENCIES:
        1. CARTOPY
        2. METPY
        3. NUMPY
        4. MATPLOTLIB
        5. PARSERS
        6. DATA_ACCESS
    
        **IF THE USER WANTS TO MAKE 2 SEPERATE PLOTS WITH 1 AS THE SHORT-TERM AND THE OTHER AS THE EXTENDED, THE PROGRAMS FOR EACH NEED TO BE RUN IN DIFFERENT FOLDERS SO THE BINARY FILE DOESN'T OVERWRITE ITSELF**
    
        COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
        '''
        
        short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, parameter)
        
        first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, parameter)
    
        local_time, utc_time = standard.plot_creation_time()
    
        
        files = count_of_GRIB_files
        mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
        datacrs = ccrs.PlateCarree()
    
        grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, parameter)

       
        if files == 1:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax = plt.subplot(1, 1, 1, projection=mapcrs)
            ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.add_feature(USCOUNTIES, linewidth=0.75)
            ax.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar = fig.colorbar(cs, shrink=color_bar_shrink)
    
        if files == 2:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
            ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax0.add_feature(cfeature.STATES, linewidth=0.5)
            ax0.add_feature(USCOUNTIES, linewidth=0.75)
            ax0.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar0 = fig.colorbar(cs0, shrink=color_bar_shrink)
    
            ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax1.add_feature(cfeature.STATES, linewidth=0.5)
            ax1.add_feature(USCOUNTIES, linewidth=0.75)
            ax1.set_title(sub_plot_2_title + '\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar1 = fig.colorbar(cs1, shrink=color_bar_shrink)
    
        if files == 3:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
            ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax0.add_feature(cfeature.STATES, linewidth=0.5)
            ax0.add_feature(USCOUNTIES, linewidth=0.75)
            ax0.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar0 = fig.colorbar(cs0, shrink=color_bar_shrink)
    
            ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax1.add_feature(cfeature.STATES, linewidth=0.5)
            ax1.add_feature(USCOUNTIES, linewidth=0.75)
            ax1.set_title(sub_plot_2_title + '\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar1 = fig.colorbar(cs1, shrink=color_bar_shrink)
    
            ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
            ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax2.add_feature(cfeature.STATES, linewidth=0.5)
            ax2.add_feature(USCOUNTIES, linewidth=0.75)
            ax2.set_title(sub_plot_3_title + '\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar2 = fig.colorbar(cs2, shrink=color_bar_shrink)
    
        if files == 4:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
            ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax0.add_feature(cfeature.STATES, linewidth=0.5)
            ax0.add_feature(USCOUNTIES, linewidth=0.75)
            ax0.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar0 = fig.colorbar(cs0, shrink=color_bar_shrink)
    
            ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax1.add_feature(cfeature.STATES, linewidth=0.5)
            ax1.add_feature(USCOUNTIES, linewidth=0.75)
            ax1.set_title(sub_plot_2_title + '\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar1 = fig.colorbar(cs1, shrink=color_bar_shrink)
    
            ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
            ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax2.add_feature(cfeature.STATES, linewidth=0.5)
            ax2.add_feature(USCOUNTIES, linewidth=0.75)
            ax2.set_title(sub_plot_3_title + '\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar2 = fig.colorbar(cs2, shrink=color_bar_shrink)
    
            ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
            ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax3.add_feature(cfeature.STATES, linewidth=0.5)
            ax3.add_feature(USCOUNTIES, linewidth=0.75)
            ax3.set_title(sub_plot_4_title + '\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar3 = fig.colorbar(cs3, shrink=color_bar_shrink) 
    
        if files >= 5:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
            ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax0.add_feature(cfeature.STATES, linewidth=0.5)
            ax0.add_feature(USCOUNTIES, linewidth=0.75)
            ax0.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar0 = fig.colorbar(cs0, shrink=color_bar_shrink)
    
            ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax1.add_feature(cfeature.STATES, linewidth=0.5)
            ax1.add_feature(USCOUNTIES, linewidth=0.75)
            ax1.set_title(sub_plot_2_title + '\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar1 = fig.colorbar(cs1, shrink=color_bar_shrink)
    
            ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
            ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax2.add_feature(cfeature.STATES, linewidth=0.5)
            ax2.add_feature(USCOUNTIES, linewidth=0.75)
            ax2.set_title(sub_plot_3_title + '\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar2 = fig.colorbar(cs2, shrink=color_bar_shrink)
    
            ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
            ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax3.add_feature(cfeature.STATES, linewidth=0.5)
            ax3.add_feature(USCOUNTIES, linewidth=0.75)
            ax3.set_title(sub_plot_4_title + '\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar3 = fig.colorbar(cs3, shrink=color_bar_shrink)
    
            ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
            ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax4.add_feature(cfeature.STATES, linewidth=0.5)
            ax4.add_feature(USCOUNTIES, linewidth=0.75)
            ax4.set_title(sub_plot_5_title + '\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar4 = fig.colorbar(cs4, shrink=color_bar_shrink) 
    
        return fig
    
    def plot_generic_extended_forecast(directory_name, parameter, grid_time_interval, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, color_table, color_table_start, color_table_stop, color_table_step, plot_title, sub_plot_1_title, sub_plot_2_title, sub_plot_3_title, sub_plot_4_title, sub_plot_5_title, fig_x_length, fig_y_length, color_bar_shrink): 
    
        r'''
        THIS FUNCTION MAKES A GENERIC CUSTOMIZED PLOT OF THE LATEST EXTENDED NOAA/NWS NDFD GRID FORECAST DATA
    
        THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
        1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
        2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        3. WEATHER PARAMETER 
        4. COLOR TABLE FOR PLOT 
        5. COLOR TABLE START, STOP AND STEP
        6. GRID TIME INTERVALS IN HOURS (DIFFERENT GRIDS ARE DIFFERENT LENGTHS IN TIME)
        7. PLOT TITLE - TITLE MUST BE ENTERED AS A STRING VARIABLE
        8. COLORBAR SHRINK - FLOAT VARIABLE THAT DETERMINES THE SIZE OF THE COLORBAR. THE DEFAULT IS 1.0. TO SHRINK THE SIZE OF THE COLORBAR SET SHRINK TO A FLOAT VALUE BETWEEN 0 AND 1. TO INCREASE THE SIZE OF THE COLORBAR SET THE SHRINK VALUE TO ABOVE 1. 
        9. FIGURE SIZE IS CUSTOMIZED BY THE INTEGER VARIABLES (fig_x_length, fig_y_length) IF YOUR PLOT COMES OUT LOOKING FUNKY (I.E. WORDS OVERLAPPING, COLORBARS NOT SIZED PROPERLY EVEN AFTER YOU EDIT THE SIZE OF THE COLORBAR SHRINK ETC.), EDIT THE SIZE OF THE FIGURE SIZE
        10. THE TITLES FOR EACH SUBPLOT
    
        PYTHON MODULE DEPENDENCIES:
        1. CARTOPY
        2. METPY
        3. NUMPY
        4. MATPLOTLIB
        5. PARSERS
        6. DATA_ACCESS
    
        **IF THE USER WANTS TO MAKE 2 SEPERATE PLOTS WITH 1 AS THE SHORT-TERM AND THE OTHER AS THE EXTENDED, THE PROGRAMS FOR EACH NEED TO BE RUN IN DIFFERENT FOLDERS SO THE BINARY FILE DOESN'T OVERWRITE ITSELF**
        
        COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
        '''
        
        
        extended_data = da.FTP_Downloads.get_NWS_NDFD_extended_grid_data(directory_name, parameter)
        
        first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, parameter)
    
        local_time, utc_time = standard.plot_creation_time()
    
        
        files = count_of_GRIB_files
        mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
        datacrs = ccrs.PlateCarree()
    
        grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, parameter)
       
        if files == 1:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax = plt.subplot(1, 1, 1, projection=mapcrs)
            ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.add_feature(USCOUNTIES, linewidth=0.75)
            ax.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar = fig.colorbar(cs, shrink=color_bar_shrink)
    
        if files == 2:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
            ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax0.add_feature(cfeature.STATES, linewidth=0.5)
            ax0.add_feature(USCOUNTIES, linewidth=0.75)
            ax0.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar0 = fig.colorbar(cs0, shrink=color_bar_shrink)
    
            ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax1.add_feature(cfeature.STATES, linewidth=0.5)
            ax1.add_feature(USCOUNTIES, linewidth=0.75)
            ax1.set_title(sub_plot_2_title + '\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar1 = fig.colorbar(cs1, shrink=color_bar_shrink)
    
        if files == 3:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
            ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax0.add_feature(cfeature.STATES, linewidth=0.5)
            ax0.add_feature(USCOUNTIES, linewidth=0.75)
            ax0.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar0 = fig.colorbar(cs0, shrink=color_bar_shrink)
    
            ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax1.add_feature(cfeature.STATES, linewidth=0.5)
            ax1.add_feature(USCOUNTIES, linewidth=0.75)
            ax1.set_title(sub_plot_2_title + '\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar1 = fig.colorbar(cs1, shrink=color_bar_shrink)
    
            ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
            ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax2.add_feature(cfeature.STATES, linewidth=0.5)
            ax2.add_feature(USCOUNTIES, linewidth=0.75)
            ax2.set_title(sub_plot_3_title + '\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar2 = fig.colorbar(cs2, shrink=color_bar_shrink)
    
        if files == 4:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
            ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax0.add_feature(cfeature.STATES, linewidth=0.5)
            ax0.add_feature(USCOUNTIES, linewidth=0.75)
            ax0.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar0 = fig.colorbar(cs0, shrink=color_bar_shrink)
    
            ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax1.add_feature(cfeature.STATES, linewidth=0.5)
            ax1.add_feature(USCOUNTIES, linewidth=0.75)
            ax1.set_title(sub_plot_2_title + '\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar1 = fig.colorbar(cs1, shrink=color_bar_shrink)
    
            ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
            ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax2.add_feature(cfeature.STATES, linewidth=0.5)
            ax2.add_feature(USCOUNTIES, linewidth=0.75)
            ax2.set_title(sub_plot_3_title + '\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar2 = fig.colorbar(cs2, shrink=color_bar_shrink)
    
            ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
            ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax3.add_feature(cfeature.STATES, linewidth=0.5)
            ax3.add_feature(USCOUNTIES, linewidth=0.75)
            ax3.set_title(sub_plot_4_title + '\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar3 = fig.colorbar(cs3, shrink=color_bar_shrink) 
    
        if files >= 5:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
            ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax0.add_feature(cfeature.STATES, linewidth=0.5)
            ax0.add_feature(USCOUNTIES, linewidth=0.75)
            ax0.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar0 = fig.colorbar(cs0, shrink=color_bar_shrink)
    
            ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax1.add_feature(cfeature.STATES, linewidth=0.5)
            ax1.add_feature(USCOUNTIES, linewidth=0.75)
            ax1.set_title(sub_plot_2_title + '\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar1 = fig.colorbar(cs1, shrink=color_bar_shrink)
    
            ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
            ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax2.add_feature(cfeature.STATES, linewidth=0.5)
            ax2.add_feature(USCOUNTIES, linewidth=0.75)
            ax2.set_title(sub_plot_3_title + '\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar2 = fig.colorbar(cs2, shrink=color_bar_shrink)
    
            ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
            ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax3.add_feature(cfeature.STATES, linewidth=0.5)
            ax3.add_feature(USCOUNTIES, linewidth=0.75)
            ax3.set_title(sub_plot_4_title + '\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar3 = fig.colorbar(cs3, shrink=color_bar_shrink)
    
            ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
            ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax4.add_feature(cfeature.STATES, linewidth=0.5)
            ax4.add_feature(USCOUNTIES, linewidth=0.75)
            ax4.set_title(sub_plot_5_title + '\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar4 = fig.colorbar(cs4, shrink=color_bar_shrink) 
    
        return fig


    class CONUS:

        r'''
        THIS NESTED CLASS HOSTS THE IMAGES FOR CONUS AKA THE "LOWER-48"
        '''
    
    
        def plot_relative_humidity_poor_recovery_short_term_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS AREAS OF POOR OVERNIGHT RELATIVE HUMIDITY RECOVERY FROM THE NATIONAL WEATHER SERVICE FORECAST
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAX RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
        
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, 'ds.maxrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.maxrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
        
        
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxrh.bin')
            
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour >= 18 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
             
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 3:
                
                if utc_time.hour >= 18 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=0.70)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 4:
        
                if utc_time.hour >= 18 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink) 
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files >= 5:
        
                if utc_time.hour >= 18 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax4.add_feature(cfeature.STATES, linewidth=0.5)
                    ax4.add_feature(USCOUNTIES, linewidth=0.75)
                    ax4.set_title('Night 5 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            return fig
    
    
        
        def plot_relative_humidity_poor_recovery_extended_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS AREAS OF POOR OVERNIGHT RELATIVE HUMIDITY RECOVERY FROM THE NATIONAL WEATHER SERVICE FORECAST
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAX RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
        
            extended_data = da.FTP_Downloads.get_NWS_NDFD_extended_grid_data(directory_name, 'ds.maxrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, 'ds.maxrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
        
        
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxrh.bin')
            
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Night 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
                
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Night 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Night 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Night 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Night 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Night 6 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=0.70)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 4:
        
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Night 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Night 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Night 6 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Night 7 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink) 
                cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files >= 5:
        
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Night 3 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Night 4 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Night 5 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Night 6 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 5, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax4.add_feature(cfeature.STATES, linewidth=0.5)
                ax4.add_feature(USCOUNTIES, linewidth=0.75)
                ax4.set_title('Night 7 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            return fig
        
        def plot_relative_humidity_excellent_recovery_short_term_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS AREAS OF EXCELLENT OVERNIGHT RELATIVE HUMIDITY RECOVERY FROM THE NATIONAL WEATHER SERVICE FORECAST
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAX RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
            
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, 'ds.maxrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.maxrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxrh.bin')
            
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour >= 18 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
             
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 3:
                
                if utc_time.hour >= 18 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 4:
        
                if utc_time.hour >= 18 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files >= 5:
        
                if utc_time.hour >= 18 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax4.add_feature(cfeature.STATES, linewidth=0.5)
                    ax4.add_feature(USCOUNTIES, linewidth=0.75)
                    ax4.set_title('Night 5 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            return fig
        
        def plot_relative_humidity_excellent_recovery_extended_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS AREAS OF EXCELLENT OVERNIGHT RELATIVE HUMIDITY RECOVERY FROM THE NATIONAL WEATHER SERVICE FORECAST
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAX RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
            
            extended_data = da.FTP_Downloads.get_NWS_NDFD_extended_grid_data(directory_name, 'ds.maxrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, 'ds.maxrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxrh.bin')
            
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Night 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
                
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Night 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Night 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
             
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Night 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Night 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Night 6 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 4:
        
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Night 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Night 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Night 6 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Night 7 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files >= 5:
        
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Night 3 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Night 4 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Night 5 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Night 6 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax4.add_feature(cfeature.STATES, linewidth=0.5)
                ax4.add_feature(USCOUNTIES, linewidth=0.75)
                ax4.set_title('Night 7 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            return fig
        
        
        
        def plot_red_flag_minimum_relative_humidity_short_term_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS AREAS WHERE MINIMUM RELATIVE HUMIDITY IS FORECAST TO MEET AND/OR EXCEED THE RED FLAG WARNING CRITERIA FOR MINIMUM RELATIVE HUMIDITY (MIN RH <= 15%) AND IS BASED ON THE National Weather Service Short-Term Forecast
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MINIMUM RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
        
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, 'ds.minrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.minrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
        
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.minrh.bin')
            
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour > 6 and utc_time.hour <= 21:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
             
                if utc_time.hour > 21 or utc_time.hour <= 6:
        
                    fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
        
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 3:
                
                if utc_time.hour > 6 and utc_time.hour <= 21:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour > 21 or utc_time.hour <= 6:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 4:
        
                if utc_time.hour > 6 and utc_time.hour <= 21:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Day 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour > 21 or utc_time.hour <= 6:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files >= 5:
        
                if utc_time.hour > 6 and utc_time.hour <= 21:
        
                    fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Day 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax4.add_feature(cfeature.STATES, linewidth=0.5)
                    ax4.add_feature(USCOUNTIES, linewidth=0.75)
                    ax4.set_title('Day 5 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour > 21 or utc_time.hour <= 6:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Day 4 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            return fig
    
    
        def plot_red_flag_minimum_relative_humidity_extended_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS AREAS WHERE MINIMUM RELATIVE HUMIDITY IS FORECAST TO MEET AND/OR EXCEED THE RED FLAG WARNING CRITERIA FOR MINIMUM RELATIVE HUMIDITY (MIN RH <= 15%) AND IS BASED ON THE National Weather Service Extended Forecast
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MINIMUM RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
        
            extended_data = da.FTP_Downloads.get_NWS_NDFD_extended_grid_data(directory_name, 'ds.minrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, 'ds.minrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
        
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.minrh.bin')
            
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Day 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
        
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Day 6 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 4:
        
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Day 6 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Day 7 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files >= 5:
        
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 3 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 4 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Day 5 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Day 6 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 5, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax4.add_feature(cfeature.STATES, linewidth=0.5)
                ax4.add_feature(USCOUNTIES, linewidth=0.75)
                ax4.set_title('Day 7 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            return fig
        
        def plot_extreme_heat_short_term_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS AREAS WHERE THERE IS EXTREME HEAT IN THE FORECAST. DURING THE WARM SEASON (APRIL - OCTOBER) EXTREME HEAT IS DEFINED AS THE MAXIMUM TEMPERATURE >= 120F AND COLD SEASON (NOVEMBER - MARCH) MAXIMUM TEMPERATURE >= 100F AND IS BASED ON THE NATIONAL WEATHER SERVICE FORECAST
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAXIMUM TEMPERATURE GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
            dirName = directory_name

            temp_scale_warm, temp_scale_cool, title_warm, title_cool = parsers.NDFD.get_extreme_heat_color_scale(dirName)
    
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(dirName, 'ds.maxt.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.maxt.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
        
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxt.bin')
            
           
            if files == 1:
        
                fig = plt.figure(figsize=(10,10))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
        
                if utc_time.month >= 4 and utc_time.month <= 10:
                    fig.suptitle(title_warm, fontweight='bold')
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    fig.suptitle(title_cool, fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00'), fontweight='bold')
        
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                    
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour >= 0 and utc_time.hour < 19:
        
                    fig = plt.figure(figsize=(9,6))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        fig.suptitle(title_warm, fontweight='bold')
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        fig.suptitle(title_cool, fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
             
                if utc_time.hour >= 19 and utc_time.hour < 24:
        
                    fig = plt.figure(figsize=(10,10))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        fig.suptitle(title_warm, fontweight='bold')
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        fig.suptitle(title_cool, fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 3:
                
                if utc_time.hour >= 0 and utc_time.hour < 19:
        
                    fig = plt.figure(figsize=(15,6))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        fig.suptitle(title_warm, fontweight='bold')
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        fig.suptitle(title_cool, fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 19 and utc_time.hour < 24:
        
                    fig = plt.figure(figsize=(9,6))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        fig.suptitle(title_warm, fontweight='bold')
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        fig.suptitle(title_cool, fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 4:
        
                if utc_time.hour >= 0 and utc_time.hour < 19:
        
                    fig = plt.figure(figsize=(10,10))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        fig.suptitle(title_warm, fontweight='bold')
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        fig.suptitle(title_cool, fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Day 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 19 and utc_time.hour < 24:
        
                    fig = plt.figure(figsize=(15,6))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        fig.suptitle(title_warm, fontweight='bold')
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        fig.suptitle(title_cool, fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files >= 5:
        
                if utc_time.hour >= 0 and utc_time.hour < 19:
        
                    fig = plt.figure(figsize=(25,10))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        fig.suptitle(title_warm, fontweight='bold')
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        fig.suptitle(title_cool, fontweight='bold')
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Day 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax4.add_feature(cfeature.STATES, linewidth=0.5)
                    ax4.add_feature(USCOUNTIES, linewidth=0.75)
                    ax4.set_title('Day 5 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 19 and utc_time.hour < 24:
        
                    fig = plt.figure(figsize=(10,10))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        fig.suptitle(title_warm, fontweight='bold')
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        fig.suptitle(title_cool, fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Day 4 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs3 = ax3.contourf(lons_5, lats_5, grb_5_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs3 = ax3.contourf(lons_5, lats_5, grb_5_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            return fig
    
        def plot_extreme_heat_extended_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS AREAS WHERE THERE IS EXTREME HEAT IN THE FORECAST. DURING THE WARM SEASON (APRIL - OCTOBER) EXTREME HEAT IS DEFINED AS THE MAXIMUM TEMPERATURE >= 120F AND COLD SEASON (NOVEMBER - MARCH) MAXIMUM TEMPERATURE >= 100F AND IS BASED ON THE NATIONAL WEATHER SERVICE FORECAST
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAXIMUM TEMPERATURE GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
            dirName = directory_name

            temp_scale_warm, temp_scale_cool, title_warm, title_cool = parsers.NDFD.get_extreme_heat_color_scale(dirName)
    
            extended_data = da.FTP_Downloads.get_NWS_NDFD_extended_grid_data(dirName, 'ds.maxt.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, 'ds.maxt.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
        
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxt.bin')
            
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
        
                if utc_time.month >= 4 and utc_time.month <= 10:
                    fig.suptitle(title_warm, fontweight='bold')
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    fig.suptitle(title_cool, fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Day 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00'), fontweight='bold')
        
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                    
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 2:
                
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                if utc_time.month >= 4 and utc_time.month <= 10:
                    fig.suptitle(title_warm, fontweight='bold')
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    fig.suptitle(title_cool, fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                if utc_time.month >= 4 and utc_time.month <= 10:
                    fig.suptitle(title_warm, fontweight='bold')
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    fig.suptitle(title_cool, fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Day 6 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
        
            if files == 4:
    
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                if utc_time.month >= 4 and utc_time.month <= 10:
                    fig.suptitle(title_warm, fontweight='bold')
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    fig.suptitle(title_cool, fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Day 6 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Day 7 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files >= 5:
        
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                if utc_time.month >= 4 and utc_time.month <= 10:
                    fig.suptitle(title_warm, fontweight='bold')
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    fig.suptitle(title_cool, fontweight='bold')
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 3 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 4 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Day 5 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Day 6 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 5, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax4.add_feature(cfeature.STATES, linewidth=0.5)
                ax4.add_feature(USCOUNTIES, linewidth=0.75)
                ax4.set_title('Day 7 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            return fig    

        
        def plot_frost_freeze_short_term_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink):
        
            r'''
            THIS FUNCTION PLOTS AREAS WHERE THE FORECAST MINIMUM TEMPERATURE IS EXPECTED TO REACH 32F OR BELOW IN THE NATIONAL WEATHER SERVICE SHORT-TERM FORECAST. THIS IS HELPFUL AS FREEZING CONDITIONS CONVERT LIVE FUELS INTO DEAD FUELS. 
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MINIMUM TEMPERATURE GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, 'ds.mint.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.mint.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.mint.bin')
            
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F) ", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour >= 14 or utc_time.hour < 11:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
             
                if utc_time.hour >= 11 and utc_time.hour < 14:
        
                    fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 3:
                
                if utc_time.hour >= 14 or utc_time.hour < 11:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 11 and utc_time.hour < 14:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 4:
        
                if utc_time.hour >= 14 or utc_time.hour < 11:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 11 and utc_time.hour < 14:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files >= 5:
        
                if utc_time.hour >= 14 or utc_time.hour < 11:
        
                    fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax4.add_feature(cfeature.STATES, linewidth=0.5)
                    ax4.add_feature(USCOUNTIES, linewidth=0.75)
                    ax4.set_title('Night 5 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 11 and utc_time.hour < 14:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            return fig
    
        def plot_frost_freeze_extended_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink):
        
            r'''
            THIS FUNCTION PLOTS AREAS WHERE THE FORECAST MINIMUM TEMPERATURE IS EXPECTED TO REACH 32F OR BELOW IN THE NATIONAL WEATHER SERVICE EXTENDED FORECAST. THIS IS HELPFUL AS FREEZING CONDITIONS CONVERT LIVE FUELS INTO DEAD FUELS. 
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MINIMUM TEMPERATURE GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
            extended_data = da.FTP_Downloads.get_NWS_NDFD_extended_grid_data(directory_name, 'ds.mint.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, 'ds.mint.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
        
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.mint.bin')
            
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F) ", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 2:
        
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
             
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 4:
        
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Night 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files >= 5:
        
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Night 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax4.add_feature(cfeature.STATES, linewidth=0.5)
                ax4.add_feature(USCOUNTIES, linewidth=0.75)
                ax4.set_title('Night 5 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(-10, 33, 1), cmap='cool_r', transform=datacrs)
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            return fig
    
        def plot_maximum_relative_humidity_short_term_forecast_and_trends(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS THE NWS OVERNIGHT RELATIVE HUMIDITY FORECAST AND THE FORECAST TRENDS OF OVERNIGHT RELATIVE HUMIDITY 
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAX RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
        
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, 'ds.maxrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.maxrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
        
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxrh.bin')
    
            lons = lons_1
            lats = lats_1
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour > 18 or utc_time.hour <= 6:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
             
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 3:
                
                if utc_time.hour > 18 or utc_time.hour <= 6:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files == 4:
        
                if utc_time.hour > 18 or utc_time.hour <= 6:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Night 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink) 
                    cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files >= 5:
        
                if utc_time.hour > 18 or utc_time.hour <= 6:
        
                    fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Night 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax4.add_feature(cfeature.STATES, linewidth=0.5)
                    ax4.add_feature(USCOUNTIES, linewidth=0.75)
                    ax4.set_title('Night 5 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs4 = ax4.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Night 3 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Night 4 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            return fig
    
    
        def plot_maximum_relative_humidity_extended_forecast_and_trends(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS THE NWS OVERNIGHT RELATIVE HUMIDITY FORECAST AND THE FORECAST TRENDS OF OVERNIGHT RELATIVE HUMIDITY 
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAX RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
        
            extended_data = da.FTP_Downloads.get_NWS_NDFD_extended_grid_data(directory_name, 'ds.maxrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.maxrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
        
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxrh.bin')
    
            lons = lons_1
            lats = lats_1
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
        
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Night 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files == 4:
        
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Night 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Night 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink) 
                cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files >= 5:
        
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Night 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Night 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax4.add_feature(cfeature.STATES, linewidth=0.5)
                ax4.add_feature(USCOUNTIES, linewidth=0.75)
                ax4.set_title('Night 5 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs4 = ax4.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            return fig
        
        
        def plot_maximum_temperature_short_term_forecast_and_trends(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS THE MAXIMUM TEMPERATURE FORECAST FOR THE FIRST PERIOD, THEN THE MAXIMUM TEMPERATURE FORECAST TRENDS FOR THE NEXT PERIODS. 
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAXIMUM TEMPERATURE GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
            dirName = directory_name

            temp_scale_warm, temp_scale_cool = parsers.NDFD.get_maximum_temperature_color_scale(dirName)
        
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(dirName, 'ds.maxt.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.maxt.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
        
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxt.bin')
    
            lons = lons_1
            lats = lats_1
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
        
                fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature", fontweight='bold')
        
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
        
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                    
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour >= 0 and utc_time.hour < 19:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
             
                if utc_time.hour >= 19 and utc_time.hour < 24:
        
                    fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature", fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 3:
    
                if utc_time.hour >= 0 and utc_time.hour < 21:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 21 and utc_time.hour < 24:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 4:
    
                if utc_time.hour >= 0 and utc_time.hour < 21:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 21 and utc_time.hour < 24:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
        
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature Trend \N{DEGREE SIGN}F)", fontweight='bold')
        
            if files >= 5:
    
                if utc_time.hour >= 0 and utc_time.hour < 21:
        
                    fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature Trend(\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax4.add_feature(cfeature.STATES, linewidth=0.5)
                    ax4.add_feature(USCOUNTIES, linewidth=0.75)
                    ax4.set_title('Day 5 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs4 = ax4.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 21 and utc_time.hour < 24:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
        
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs2 = ax2.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs3 = ax3.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            return fig
    
    
        def plot_maximum_temperature_extended_forecast_and_trends(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS THE MAXIMUM TEMPERATURE FORECAST FOR THE FIRST PERIOD, THEN THE MAXIMUM TEMPERATURE FORECAST TRENDS FOR THE NEXT PERIODS. 
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAXIMUM TEMPERATURE GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''

            dirName = directory_name

            temp_scale_warm, temp_scale_cool = parsers.NDFD.get_maximum_temperature_color_scale(dirName)
        
            extended_data = da.FTP_Downloads.get_NWS_NDFD_extended_grid_data(dirName, 'ds.maxt.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, 'ds.maxt.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
        
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxt.bin')
    
            lons = lons_1
            lats = lats_1
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
        
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Temperature", fontweight='bold')
        
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
        
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                    
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 2:
        
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 4:
        
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files >= 5:
        
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Maximum Temperature Trend(\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax4.add_feature(cfeature.STATES, linewidth=0.5)
                ax4.add_feature(USCOUNTIES, linewidth=0.75)
                ax4.set_title('Day 5 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs4 = ax4.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
                
            return fig
    
        
        
        def plot_minimum_temperature_short_term_forecast_and_trends(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS THE MINIMUM TEMPERATURE FORECAST FOR THE FIRST PERIOD, THEN THE MAXIMUM TEMPERATURE FORECAST TRENDS FOR THE NEXT PERIODS.
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MINIMUM TEMPERATURE GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''

            dirName = directory_name

            temp_scale_warm, temp_scale_cool = parsers.NDFD.get_minimum_temperature_color_scale(dirName)
        
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(dirName, 'ds.mint.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.mint.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
        
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.mint.bin')
    
            lons = lons_1
            lats = lats_1
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
        
                fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature", fontweight='bold')
        
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
        
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                    
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour >= 14 or utc_time.hour < 11:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
             
                if utc_time.hour >= 11 and utc_time.hour < 14:
        
                    fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature", fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 3:
    
                if utc_time.hour >= 14 or utc_time.hour < 11:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 11 and utc_time.hour < 14:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 4:
    
                if utc_time.hour >= 14 or utc_time.hour < 11:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 11 and utc_time.hour < 14:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
        
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature Trend \N{DEGREE SIGN}F)", fontweight='bold')
        
            if files >= 5:
    
                if utc_time.hour >= 14 or utc_time.hour < 11:
        
                    fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature Trend(\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax4.add_feature(cfeature.STATES, linewidth=0.5)
                    ax4.add_feature(USCOUNTIES, linewidth=0.75)
                    ax4.set_title('Day 5 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs4 = ax4.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 11 and utc_time.hour < 14:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
        
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs2 = ax2.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs3 = ax3.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            return fig
    
    
        def plot_minimum_temperature_extended_forecast_and_trends(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS THE MINIMUM TEMPERATURE FORECAST FOR THE FIRST PERIOD, THEN THE MAXIMUM TEMPERATURE FORECAST TRENDS FOR THE NEXT PERIODS.
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MINIMUM TEMPERATURE GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''

            dirName = directory_name

            temp_scale_warm, temp_scale_cool = parsers.NDFD.get_minimum_temperature_color_scale(dirName)
        
            extended_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(dirName, 'ds.mint.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, 'ds.mint.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
        
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.mint.bin')
    
            lons = lons_1
            lats = lats_1
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
        
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Temperature", fontweight='bold')
        
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
        
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                    
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 2:
        
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 4:
        
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files >= 5:
        
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Minimum Temperature Trend(\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax4.add_feature(cfeature.STATES, linewidth=0.5)
                ax4.add_feature(USCOUNTIES, linewidth=0.75)
                ax4.set_title('Day 5 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs4 = ax4.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            return fig
        
        
        def plot_minimum_relative_humidity_short_term_forecast_and_trends(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS THE NWS FORECAST MINIMUM RELATIVE HUMIDITY AND THE MINIMUM RELATIVE HUMIDITY FORECAST TRENDS
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MIN RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
        
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, 'ds.minrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.minrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
        
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.minrh.bin')
    
            lons = lons_1
            lats = lats_1
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour > 6 and utc_time.hour <= 21:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
             
                if utc_time.hour >= 22 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 3:
                
                if utc_time.hour > 6 and utc_time.hour <= 21:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
                if utc_time.hour >= 22 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files == 4:
    
                if utc_time.hour > 6 and utc_time.hour <= 21:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink) 
                    cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
                if utc_time.hour >= 22 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files >= 5:
        
                if utc_time.hour > 6 and utc_time.hour <= 21:
        
                    fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax4.add_feature(cfeature.STATES, linewidth=0.5)
                    ax4.add_feature(USCOUNTIES, linewidth=0.75)
                    ax4.set_title('Day 5 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs4 = ax4.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
                if utc_time.hour >= 22 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax0.add_feature(cfeature.STATES, linewidth=0.5)
                    ax0.add_feature(USCOUNTIES, linewidth=0.75)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax1.add_feature(cfeature.STATES, linewidth=0.5)
                    ax1.add_feature(USCOUNTIES, linewidth=0.75)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax2.add_feature(cfeature.STATES, linewidth=0.5)
                    ax2.add_feature(USCOUNTIES, linewidth=0.75)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                    ax3.add_feature(cfeature.STATES, linewidth=0.5)
                    ax3.add_feature(USCOUNTIES, linewidth=0.75)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            return fig
    
    
        def plot_minimum_relative_humidity_extended_forecast_and_trends(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS THE NWS FORECAST MINIMUM RELATIVE HUMIDITY AND THE MINIMUM RELATIVE HUMIDITY FORECAST TRENDS
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MIN RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
        
            extended_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, 'ds.minrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, 'ds.minrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
        
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.minrh.bin')
    
            lons = lons_1
            lats = lats_1
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax.add_feature(cfeature.STATES, linewidth=0.5)
                ax.add_feature(USCOUNTIES, linewidth=0.75)
                ax.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
        
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
             
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files == 4:
    
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink) 
                cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files >= 5:
    
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax0.add_feature(cfeature.STATES, linewidth=0.5)
                ax0.add_feature(USCOUNTIES, linewidth=0.75)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax1.add_feature(cfeature.STATES, linewidth=0.5)
                ax1.add_feature(USCOUNTIES, linewidth=0.75)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax2.add_feature(cfeature.STATES, linewidth=0.5)
                ax2.add_feature(USCOUNTIES, linewidth=0.75)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax3.add_feature(cfeature.STATES, linewidth=0.5)
                ax3.add_feature(USCOUNTIES, linewidth=0.75)
                ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
                ax4.add_feature(cfeature.STATES, linewidth=0.5)
                ax4.add_feature(USCOUNTIES, linewidth=0.75)
                ax4.set_title('Day 5 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs4 = ax4.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            return fig
    


class National_Weather_Service_Forecast_Predictive_Services_Areas_Perspective:

    r'''
    THIS CLASS HOSTS A VARIETY OF PLOTTING FUNCTIONS. 

    THESE FUNCTIONS PLOT THE NATIONAL WEATHER SERVICE GRIDDED FORECAST DATA IN VARIOUS DIFFERENT WAYS

    GENERIC FORECAST FUNCTIONS OFFER SLIGHTLY MORE CUSTOMIZATION AS BOTH THE GENERIC FUNCTIONS ARE NOT PRESETS FOR A CERTAIN WEATHER ELEMENT. 

    THIS CLASS PLOTS THE DATA USING PREDICTIVE SERVICES AREAS (PSA) BOUNDARIES AS A REFERENCE POINT. 

    (C) METEOROLOGIST ERIC J. DREWITZ 2023

    '''

    def plot_generic_short_term_forecast(directory_name, parameter, grid_time_interval, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, color_table, color_table_start, color_table_stop, color_table_step, plot_title, sub_plot_1_title, sub_plot_2_title, sub_plot_3_title, sub_plot_4_title, sub_plot_5_title, fig_x_length, fig_y_length, color_bar_shrink, PSA_Border_Color, PSA_Border_Line_Thickness): 
    
        r'''
        THIS FUNCTION MAKES A GENERIC CUSTOMIZED PLOT OF THE LATEST SHORT-TERM NOAA/NWS NDFD GRID FORECAST DATA
    
        THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
        1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
        2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        3. WEATHER PARAMETER 
        4. COLOR TABLE FOR PLOT 
        5. COLOR TABLE START, STOP AND STEP
        6. GRID TIME INTERVALS IN HOURS (DIFFERENT GRIDS ARE DIFFERENT LENGTHS IN TIME)
        7. PLOT TITLE - TITLE MUST BE ENTERED AS A STRING VARIABLE
        8. COLORBAR SHRINK - FLOAT VARIABLE THAT DETERMINES THE SIZE OF THE COLORBAR. THE DEFAULT IS 1.0. TO SHRINK THE SIZE OF THE COLORBAR SET SHRINK TO A FLOAT VALUE BETWEEN 0 AND 1. TO INCREASE THE SIZE OF THE COLORBAR SET THE SHRINK VALUE TO ABOVE 1. 
        9. FIGURE SIZE IS CUSTOMIZED BY THE INTEGER VARIABLES (fig_x_length, fig_y_length) IF YOUR PLOT COMES OUT LOOKING FUNKY (I.E. WORDS OVERLAPPING, COLORBARS NOT SIZED PROPERLY EVEN AFTER YOU EDIT THE SIZE OF THE COLORBAR SHRINK ETC.), EDIT THE SIZE OF THE FIGURE SIZE
    
        PYTHON MODULE DEPENDENCIES:
        1. CARTOPY
        2. METPY
        3. NUMPY
        4. MATPLOTLIB
        5. PARSERS
        6. DATA_ACCESS
    
        **IF THE USER WANTS TO MAKE 2 SEPERATE PLOTS WITH 1 AS THE SHORT-TERM AND THE OTHER AS THE EXTENDED, THE PROGRAMS FOR EACH NEED TO BE RUN IN DIFFERENT FOLDERS SO THE BINARY FILE DOESN'T OVERWRITE ITSELF**
    
        COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
        '''
        
        short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, parameter)
        
        first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, parameter)
    
        local_time, utc_time = standard.plot_creation_time()
    
        
        files = count_of_GRIB_files
        mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
        datacrs = ccrs.PlateCarree()

        PSAs = geometry.Predictive_Services_Areas.get_PSAs(PSA_Border_Color)
    
        grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, parameter)

       
        if files == 1:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax = plt.subplot(1, 1, 1, projection=mapcrs)
            ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar = fig.colorbar(cs, shrink=color_bar_shrink)
    
        if files == 2:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
            ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax0.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax0.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar0 = fig.colorbar(cs0, shrink=color_bar_shrink)
    
            ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax1.set_title(sub_plot_2_title + '\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar1 = fig.colorbar(cs1, shrink=color_bar_shrink)
    
        if files == 3:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
            ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax0.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax0.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar0 = fig.colorbar(cs0, shrink=color_bar_shrink)
    
            ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax1.set_title(sub_plot_2_title + '\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar1 = fig.colorbar(cs1, shrink=color_bar_shrink)
    
            ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
            ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax2.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax2.set_title(sub_plot_3_title + '\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar2 = fig.colorbar(cs2, shrink=color_bar_shrink)
    
        if files == 4:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
            ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax0.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax0.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar0 = fig.colorbar(cs0, shrink=color_bar_shrink)
    
            ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax1.set_title(sub_plot_2_title + '\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar1 = fig.colorbar(cs1, shrink=color_bar_shrink)
    
            ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
            ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax2.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax2.set_title(sub_plot_3_title + '\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar2 = fig.colorbar(cs2, shrink=color_bar_shrink)
    
            ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
            ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax3.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax3.set_title(sub_plot_4_title + '\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar3 = fig.colorbar(cs3, shrink=color_bar_shrink) 
    
        if files >= 5:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
            ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax0.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax0.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar0 = fig.colorbar(cs0, shrink=color_bar_shrink)
    
            ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax1.set_title(sub_plot_2_title + '\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar1 = fig.colorbar(cs1, shrink=color_bar_shrink)
    
            ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
            ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax2.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax2.set_title(sub_plot_3_title + '\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar2 = fig.colorbar(cs2, shrink=color_bar_shrink)
    
            ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
            ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax3.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax3.set_title(sub_plot_4_title + '\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar3 = fig.colorbar(cs3, shrink=color_bar_shrink)
    
            ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
            ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax4.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax4.set_title(sub_plot_5_title + '\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar4 = fig.colorbar(cs4, shrink=color_bar_shrink) 
    
        return fig
    
    def plot_generic_extended_forecast(directory_name, parameter, grid_time_interval, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, color_table, color_table_start, color_table_stop, color_table_step, plot_title, sub_plot_1_title, sub_plot_2_title, sub_plot_3_title, sub_plot_4_title, sub_plot_5_title, fig_x_length, fig_y_length, color_bar_shrink, PSA_Border_Color, PSA_Border_Line_Thickness): 
    
        r'''
        THIS FUNCTION MAKES A GENERIC CUSTOMIZED PLOT OF THE LATEST EXTENDED NOAA/NWS NDFD GRID FORECAST DATA
    
        THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
        1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
        2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        3. WEATHER PARAMETER 
        4. COLOR TABLE FOR PLOT 
        5. COLOR TABLE START, STOP AND STEP
        6. GRID TIME INTERVALS IN HOURS (DIFFERENT GRIDS ARE DIFFERENT LENGTHS IN TIME)
        7. PLOT TITLE - TITLE MUST BE ENTERED AS A STRING VARIABLE
        8. COLORBAR SHRINK - FLOAT VARIABLE THAT DETERMINES THE SIZE OF THE COLORBAR. THE DEFAULT IS 1.0. TO SHRINK THE SIZE OF THE COLORBAR SET SHRINK TO A FLOAT VALUE BETWEEN 0 AND 1. TO INCREASE THE SIZE OF THE COLORBAR SET THE SHRINK VALUE TO ABOVE 1. 
        9. FIGURE SIZE IS CUSTOMIZED BY THE INTEGER VARIABLES (fig_x_length, fig_y_length) IF YOUR PLOT COMES OUT LOOKING FUNKY (I.E. WORDS OVERLAPPING, COLORBARS NOT SIZED PROPERLY EVEN AFTER YOU EDIT THE SIZE OF THE COLORBAR SHRINK ETC.), EDIT THE SIZE OF THE FIGURE SIZE
        10. THE TITLES FOR EACH SUBPLOT
    
        PYTHON MODULE DEPENDENCIES:
        1. CARTOPY
        2. METPY
        3. NUMPY
        4. MATPLOTLIB
        5. PARSERS
        6. DATA_ACCESS
    
        **IF THE USER WANTS TO MAKE 2 SEPERATE PLOTS WITH 1 AS THE SHORT-TERM AND THE OTHER AS THE EXTENDED, THE PROGRAMS FOR EACH NEED TO BE RUN IN DIFFERENT FOLDERS SO THE BINARY FILE DOESN'T OVERWRITE ITSELF**
        
        COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
        '''
        
        
        extended_data = da.FTP_Downloads.get_NWS_NDFD_extended_grid_data(directory_name, parameter)
        
        first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, parameter)
    
        local_time, utc_time = standard.plot_creation_time()
    
        
        files = count_of_GRIB_files
        mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
        datacrs = ccrs.PlateCarree()

        PSAs = geometry.Predictive_Services_Areas.get_PSAs(PSA_Border_Color)
    
        grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, parameter)
       
        if files == 1:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax = plt.subplot(1, 1, 1, projection=mapcrs)
            ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar = fig.colorbar(cs, shrink=color_bar_shrink)
    
        if files == 2:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
            ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax0.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax0.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar0 = fig.colorbar(cs0, shrink=color_bar_shrink)
    
            ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax1.set_title(sub_plot_2_title + '\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar1 = fig.colorbar(cs1, shrink=color_bar_shrink)
    
        if files == 3:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
            ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax0.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax0.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar0 = fig.colorbar(cs0, shrink=color_bar_shrink)
    
            ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax1.set_title(sub_plot_2_title + '\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar1 = fig.colorbar(cs1, shrink=color_bar_shrink)
    
            ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
            ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax2.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax2.set_title(sub_plot_3_title + '\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar2 = fig.colorbar(cs2, shrink=color_bar_shrink)
    
        if files == 4:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
            ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax0.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax0.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar0 = fig.colorbar(cs0, shrink=color_bar_shrink)
    
            ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax1.set_title(sub_plot_2_title + '\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar1 = fig.colorbar(cs1, shrink=color_bar_shrink)
    
            ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
            ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax2.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax2.set_title(sub_plot_3_title + '\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar2 = fig.colorbar(cs2, shrink=color_bar_shrink)
    
            ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
            ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax3.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax3.set_title(sub_plot_4_title + '\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar3 = fig.colorbar(cs3, shrink=color_bar_shrink) 
    
        if files >= 5:
    
            fig = plt.figure(figsize=(fig_x_length,fig_y_length))
            fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
            fig.suptitle("National Weather Service Forecast\n" + plot_title, fontweight='bold')
            
            ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
            ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax0.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax0.set_title(sub_plot_1_title + '\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar0 = fig.colorbar(cs0, shrink=color_bar_shrink)
    
            ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax1.set_title(sub_plot_2_title + '\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar1 = fig.colorbar(cs1, shrink=color_bar_shrink)
    
            ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
            ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax2.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax2.set_title(sub_plot_3_title + '\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar2 = fig.colorbar(cs2, shrink=color_bar_shrink)
    
            ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
            ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax3.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax3.set_title(sub_plot_4_title + '\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar3 = fig.colorbar(cs3, shrink=color_bar_shrink)
    
            ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
            ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax4.add_feature(PSAs, linewidth=PSA_Border_Line_Thickness)
            ax4.set_title(sub_plot_5_title + '\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
    
            cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, transform=datacrs)
            cbar4 = fig.colorbar(cs4, shrink=color_bar_shrink) 
    
        return fig


    class CONUS:
    
        r'''
        THIS NESTED CLASS HOSTS THE IMAGES FOR CONUS AKA THE "LOWER-48"
        '''

        def plot_relative_humidity_poor_recovery_short_term_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS AREAS OF POOR OVERNIGHT RELATIVE HUMIDITY RECOVERY FROM THE NATIONAL WEATHER SERVICE FORECAST
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAX RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
        
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, 'ds.maxrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.maxrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
        
        
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')

    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxrh.bin')
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour >= 18 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
             
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 3:
                
                if utc_time.hour >= 18 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=0.70)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 4:
        
                if utc_time.hour >= 18 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink) 
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files >= 5:
        
                if utc_time.hour >= 18 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(PSAs, linewidth=1.25)
                    ax4.set_title('Night 5 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(0, 31, 1),cmap='YlOrBr_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            return fig
    
        def plot_relative_humidity_poor_recovery_extended_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS AREAS OF POOR OVERNIGHT RELATIVE HUMIDITY RECOVERY FROM THE NATIONAL WEATHER SERVICE FORECAST
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAX RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
        
            extended_data = da.FTP_Downloads.get_NWS_NDFD_extended_grid_data(directory_name, 'ds.maxrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, 'ds.maxrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
        
        
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxrh.bin')
            
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Night 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
                
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Night 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Night 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Night 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Night 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Night 6 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=0.70)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 4:
        
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Night 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Night 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Night 6 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1.25)
                ax3.set_title('Night 7 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink) 
                cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files >= 5:
        
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nPoor Overnight Relative Humidity Recovery (Max RH <= 30%)", fontweight='bold')
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Night 3 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Night 4 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Night 5 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1.25)
                ax3.set_title('Night 6 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 5, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(PSAs, linewidth=1.25)
                ax4.set_title('Night 7 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(0, 31, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            return fig
        
        def plot_relative_humidity_excellent_recovery_short_term_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS AREAS OF EXCELLENT OVERNIGHT RELATIVE HUMIDITY RECOVERY FROM THE NATIONAL WEATHER SERVICE FORECAST
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAX RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
            
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, 'ds.maxrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.maxrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
        
        
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('red')
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxrh.bin')
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour >= 18 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs) 
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
             
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 3:
                
                if utc_time.hour >= 18 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 4:
        
                if utc_time.hour >= 18 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files >= 5:
        
                if utc_time.hour >= 18 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(PSAs, linewidth=1.25)
                    ax4.set_title('Night 5 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            return fig
        
        def plot_relative_humidity_excellent_recovery_extended_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS AREAS OF EXCELLENT OVERNIGHT RELATIVE HUMIDITY RECOVERY FROM THE NATIONAL WEATHER SERVICE FORECAST
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAX RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
            
            extended_data = da.FTP_Downloads.get_NWS_NDFD_extended_grid_data(directory_name, 'ds.maxrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, 'ds.maxrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('red')
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxrh.bin')
            
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Night 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 06Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 18Z'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
                
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Night 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Night 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
             
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Night 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Night 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Night 6 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 4:
        
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Night 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Night 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Night 6 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1.25)
                ax3.set_title('Night 7 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files >= 5:
        
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nExcellent Overnight Relative Humidity Recovery (Max RH >= 80%)", fontweight='bold')
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Night 3 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Night 4 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Night 5 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1.25)
                ax3.set_title('Night 6 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(PSAs, linewidth=1.25)
                ax4.set_title('Night 7 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(80, 101, 1), cmap='Greens', transform=datacrs)
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            return fig
        
        
        
        def plot_red_flag_minimum_relative_humidity_short_term_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS AREAS WHERE MINIMUM RELATIVE HUMIDITY IS FORECAST TO MEET AND/OR EXCEED THE RED FLAG WARNING CRITERIA FOR MINIMUM RELATIVE HUMIDITY (MIN RH <= 15%) AND IS BASED ON THE National Weather Service Short-Term Forecast
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MINIMUM RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
        
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, 'ds.minrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.minrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
        
        
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.minrh.bin')
            
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour > 6 and utc_time.hour <= 21:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
             
                if utc_time.hour > 21 or utc_time.hour <= 6:
        
                    fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
        
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 3:
                
                if utc_time.hour > 6 and utc_time.hour <= 21:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour > 21 or utc_time.hour <= 6:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 4:
        
                if utc_time.hour > 6 and utc_time.hour <= 21:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Day 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour > 21 or utc_time.hour <= 6:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files >= 5:
        
                if utc_time.hour > 6 and utc_time.hour <= 21:
        
                    fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Day 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(PSAs, linewidth=1.25)
                    ax4.set_title('Day 5 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Relative Humidity (%)", fontweight='bold')
        
                if utc_time.hour > 21 or utc_time.hour <= 6:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Day 4 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            return fig
    
    
        def plot_red_flag_minimum_relative_humidity_extended_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS AREAS WHERE MINIMUM RELATIVE HUMIDITY IS FORECAST TO MEET AND/OR EXCEED THE RED FLAG WARNING CRITERIA FOR MINIMUM RELATIVE HUMIDITY (MIN RH <= 15%) AND IS BASED ON THE National Weather Service Extended Forecast
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MINIMUM RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
        
            extended_data = da.FTP_Downloads.get_NWS_NDFD_extended_grid_data(directory_name, 'ds.minrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, 'ds.minrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
        
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.minrh.bin')
            
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Day 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
        
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Day 6 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 4:
        
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Day 6 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1.25)
                ax3.set_title('Day 7 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files >= 5:
        
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nRed Flag Warning Minimum Relative Humidity(Min RH <= 15%)", fontweight='bold')
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 3 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 4 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Day 5 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1.25)
                ax3.set_title('Day 6 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 5, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(PSAs, linewidth=1.25)
                ax4.set_title('Day 7 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', transform=datacrs)
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            return fig
        
        def plot_extreme_heat_short_term_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS AREAS WHERE THERE IS EXTREME HEAT IN THE FORECAST. DURING THE WARM SEASON (APRIL - OCTOBER) EXTREME HEAT IS DEFINED AS THE MAXIMUM TEMPERATURE >= 120F AND COLD SEASON (NOVEMBER - MARCH) MAXIMUM TEMPERATURE >= 100F AND IS BASED ON THE NATIONAL WEATHER SERVICE FORECAST
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAXIMUM TEMPERATURE GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''

            dirName = directory_name

            temp_scale_warm, temp_scale_cool, title_warm, title_cool = parsers.NDFD.get_extreme_heat_color_scale(dirName)
    
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(dirName, 'ds.maxt.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.maxt.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
        
        
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxt.bin')
            
           
            if files == 1:
        
                fig = plt.figure(figsize=(10,10))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
        
                if utc_time.month >= 4 and utc_time.month <= 10:
                    fig.suptitle(title_warm, fontweight='bold')
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    fig.suptitle(title_cool, fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00'), fontweight='bold')
        
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                    
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour >= 0 and utc_time.hour < 19:
        
                    fig = plt.figure(figsize=(9,6))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        fig.suptitle(title_warm, fontweight='bold')
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        fig.suptitle(title_cool, fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
             
                if utc_time.hour >= 19 and utc_time.hour < 24:
        
                    fig = plt.figure(figsize=(10,10))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        fig.suptitle(title_warm, fontweight='bold')
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        fig.suptitle(title_cool, fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 3:
                
                if utc_time.hour >= 0 and utc_time.hour < 19:
        
                    fig = plt.figure(figsize=(15,6))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        fig.suptitle(title_warm, fontweight='bold')
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        fig.suptitle(title_cool, fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 19 and utc_time.hour < 24:
        
                    fig = plt.figure(figsize=(9,6))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        fig.suptitle(title_warm, fontweight='bold')
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        fig.suptitle(title_cool, fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 4:
        
                if utc_time.hour >= 0 and utc_time.hour < 19:
        
                    fig = plt.figure(figsize=(10,10))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        fig.suptitle(title_warm, fontweight='bold')
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        fig.suptitle(title_cool, fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Day 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 19 and utc_time.hour < 24:
        
                    fig = plt.figure(figsize=(15,6))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        fig.suptitle(title_warm, fontweight='bold')
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        fig.suptitle(title_cool, fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files >= 5:
        
                if utc_time.hour >= 0 and utc_time.hour < 19:
        
                    fig = plt.figure(figsize=(25,10))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        fig.suptitle(title_warm, fontweight='bold')
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        fig.suptitle(title_cool, fontweight='bold')
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Day 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(PSAs, linewidth=1.25)
                    ax4.set_title('Day 5 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 19 and utc_time.hour < 24:
        
                    fig = plt.figure(figsize=(10,10))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        fig.suptitle(title_warm, fontweight='bold')
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        fig.suptitle(title_cool, fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Day 4 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs3 = ax3.contourf(lons_5, lats_5, grb_5_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs3 = ax3.contourf(lons_5, lats_5, grb_5_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            return fig
    
    
        def plot_extreme_heat_extended_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS AREAS WHERE THERE IS EXTREME HEAT IN THE FORECAST. DURING THE WARM SEASON (APRIL - OCTOBER) EXTREME HEAT IS DEFINED AS THE MAXIMUM TEMPERATURE >= 120F AND COLD SEASON (NOVEMBER - MARCH) MAXIMUM TEMPERATURE >= 100F AND IS BASED ON THE NATIONAL WEATHER SERVICE FORECAST
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAXIMUM TEMPERATURE GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''

            dirName = directory_name

            temp_scale_warm, temp_scale_cool, title_warm, title_cool = parsers.NDFD.get_extreme_heat_color_scale(dirName)
    
            extended_data = da.FTP_Downloads.get_NWS_NDFD_extended_grid_data(dirName, 'ds.maxt.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, 'ds.maxt.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
        
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxt.bin')
            
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
        
                if utc_time.month >= 4 and utc_time.month <= 10:
                    fig.suptitle(title_warm, fontweight='bold')
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    fig.suptitle(title_cool, fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Day 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00'), fontweight='bold')
        
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                    
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 2:
                
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                if utc_time.month >= 4 and utc_time.month <= 10:
                    fig.suptitle(title_warm, fontweight='bold')
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    fig.suptitle(title_cool, fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                if utc_time.month >= 4 and utc_time.month <= 10:
                    fig.suptitle(title_warm, fontweight='bold')
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    fig.suptitle(title_cool, fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Day 6 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
        
            if files == 4:
    
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                if utc_time.month >= 4 and utc_time.month <= 10:
                    fig.suptitle(title_warm, fontweight='bold')
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    fig.suptitle(title_cool, fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 4 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 5 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Day 6 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1.25)
                ax3.set_title('Day 7 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files >= 5:
        
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                if utc_time.month >= 4 and utc_time.month <= 10:
                    fig.suptitle(title_warm, fontweight='bold')
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    fig.suptitle(title_cool, fontweight='bold')
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 3 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 4 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Day 5 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1.25)
                ax3.set_title('Day 6 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 5, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(PSAs, linewidth=1.25)
                ax4.set_title('Day 7 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=temp_scale_warm, cmap='hot', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=temp_scale_cool, cmap='hot', transform=datacrs)
                        
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            return fig
        
        def plot_frost_freeze_short_term_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink):
        
            r'''
            THIS FUNCTION PLOTS AREAS WHERE THE FORECAST MINIMUM TEMPERATURE IS EXPECTED TO REACH 32F OR BELOW IN THE NATIONAL WEATHER SERVICE SHORT-TERM FORECAST. THIS IS HELPFUL AS FREEZING CONDITIONS CONVERT LIVE FUELS INTO DEAD FUELS. 
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MINIMUM TEMPERATURE GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, 'ds.mint.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.mint.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
        
        
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.mint.bin')
            
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F) ", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour >= 14 or utc_time.hour < 11:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
             
                if utc_time.hour >= 11 and utc_time.hour < 14:
        
                    fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 3:
                
                if utc_time.hour >= 14 or utc_time.hour < 11:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 11 and utc_time.hour < 14:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 4:
        
                if utc_time.hour >= 14 or utc_time.hour < 11:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 11 and utc_time.hour < 14:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files >= 5:
        
                if utc_time.hour >= 14 or utc_time.hour < 11:
        
                    fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(PSAs, linewidth=1.25)
                    ax4.set_title('Night 5 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 11 and utc_time.hour < 14:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Night 4 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            return fig    
    
        def plot_frost_freeze_extended_forecast(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink):
        
            r'''
            THIS FUNCTION PLOTS AREAS WHERE THE FORECAST MINIMUM TEMPERATURE IS EXPECTED TO REACH 32F OR BELOW IN THE NATIONAL WEATHER SERVICE EXTENDED FORECAST. THIS IS HELPFUL AS FREEZING CONDITIONS CONVERT LIVE FUELS INTO DEAD FUELS. 
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MINIMUM TEMPERATURE GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
            extended_data = da.FTP_Downloads.get_NWS_NDFD_extended_grid_data(directory_name, 'ds.mint.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, 'ds.mint.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')
    
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.mint.bin')
            
            
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F) ", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 2:
        
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
             
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 4:
        
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1)
                ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1)
                ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1)
                ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1)
                ax3.set_title('Night 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files >= 5:
        
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nFrost & Freeze (Minimum Temperature <= 32 \N{DEGREE SIGN}F)", fontweight='bold')
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Night 2 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Night 3 Forecast\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1.25)
                ax3.set_title('Night 4 Forecast\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons_4, lats_4, grb_4_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(PSAs, linewidth=1.25)
                ax4.set_title('Night 5 Forecast\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs4 = ax4.contourf(lons_5, lats_5, grb_5_vals, levels=np.arange(-30, 33, 1), cmap='cool_r', transform=datacrs)
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            return fig    
    
    
        def plot_maximum_relative_humidity_short_term_forecast_and_trends(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS THE NWS OVERNIGHT RELATIVE HUMIDITY FORECAST AND THE FORECAST TRENDS OF OVERNIGHT RELATIVE HUMIDITY 
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAX RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
        
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, 'ds.maxrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.maxrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('red')
        
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxrh.bin')
    
            lons = lons_1
            lats = lats_1
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour > 18 or utc_time.hour <= 6:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
             
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 3:
                
                if utc_time.hour > 18 or utc_time.hour <= 6:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files == 4:
        
                if utc_time.hour > 18 or utc_time.hour <= 6:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Night 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink) 
                    cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files >= 5:
        
                if utc_time.hour > 18 or utc_time.hour <= 6:
        
                    fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Night 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(PSAs, linewidth=1.25)
                    ax4.set_title('Night 5 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs4 = ax4.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
                if utc_time.hour >= 6 and utc_time.hour < 18:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Night 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Night 3 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Night 4 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            return fig
    
    
        def plot_maximum_relative_humidity_extended_forecast_and_trends(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS THE NWS OVERNIGHT RELATIVE HUMIDITY FORECAST AND THE FORECAST TRENDS OF OVERNIGHT RELATIVE HUMIDITY 
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAX RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
        
            extended_data = da.FTP_Downloads.get_NWS_NDFD_extended_grid_data(directory_name, 'ds.maxrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.maxrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('red')
        
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxrh.bin')
    
            lons = lons_1
            lats = lats_1
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
        
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Night 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files == 4:
        
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Night 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1.25)
                ax3.set_title('Night 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink) 
                cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files >= 5:
        
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Relative Humidity & Maximum Relative Humidity Trend", fontweight='bold')
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Night 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Night 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Night 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1.25)
                ax3.set_title('Night 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(PSAs, linewidth=1.25)
                ax4.set_title('Night 5 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs4 = ax4.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            return fig
        
        
        def plot_maximum_temperature_short_term_forecast_and_trends(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS THE MAXIMUM TEMPERATURE FORECAST FOR THE FIRST PERIOD, THEN THE MAXIMUM TEMPERATURE FORECAST TRENDS FOR THE NEXT PERIODS. 
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAXIMUM TEMPERATURE GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
            dirName = directory_name

            temp_scale_warm, temp_scale_cool = parsers.NDFD.get_maximum_temperature_color_scale(dirName)
            
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(dirName, 'ds.maxt.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.maxt.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')

            
        
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxt.bin')
    
            lons = lons_1
            lats = lats_1
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
        
                fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature", fontweight='bold')
        
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
        
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                    
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour >= 0 and utc_time.hour < 19:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
             
                if utc_time.hour >= 19 and utc_time.hour < 24:
        
                    fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature", fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 3:
    
                if utc_time.hour >= 0 and utc_time.hour < 21:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 21 and utc_time.hour < 24:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 4:
    
                if utc_time.hour >= 0 and utc_time.hour < 21:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)  
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 21 and utc_time.hour < 24:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
        
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature Trend \N{DEGREE SIGN}F)", fontweight='bold')
        
            if files >= 5:
    
                if utc_time.hour >= 0 and utc_time.hour < 21:
        
                    fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature Trend(\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(PSAs, linewidth=1.25)
                    ax4.set_title('Day 5 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs4 = ax4.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 21 and utc_time.hour < 24:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
        
                    fig.suptitle("National Weather Service Short-Term Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs2 = ax2.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs3 = ax3.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            return fig
    
    
        def plot_maximum_temperature_extended_forecast_and_trends(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS THE MAXIMUM TEMPERATURE FORECAST FOR THE FIRST PERIOD, THEN THE MAXIMUM TEMPERATURE FORECAST TRENDS FOR THE NEXT PERIODS. 
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MAXIMUM TEMPERATURE GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
            dirName = directory_name

            temp_scale_warm, temp_scale_cool = parsers.NDFD.get_maximum_temperature_color_scale(dirName)
        
            extended_data = da.FTP_Downloads.get_NWS_NDFD_extended_grid_data(dirName, 'ds.maxt.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, 'ds.maxt.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')
        
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.maxt.bin')
    
            lons = lons_1
            lats = lats_1
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
        
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Temperature", fontweight='bold')
        
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
        
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                    
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 2:
        
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 4:
        
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1.25)
                ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files >= 5:
        
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                fig.suptitle("National Weather Service Extended Forecast\nMaximum Temperature & Maximum Temperature Trends", fontweight='bold')
        
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 12Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 00Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Maximum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Maximum Temperature Trend(\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1.25)
                ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(PSAs, linewidth=1.25)
                ax4.set_title('Day 5 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs4 = ax4.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Maximum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
                
            return fig
    
        
        
        def plot_minimum_temperature_short_term_forecast_and_trends(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS THE MINIMUM TEMPERATURE FORECAST FOR THE FIRST PERIOD, THEN THE MAXIMUM TEMPERATURE FORECAST TRENDS FOR THE NEXT PERIODS.
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MINIMUM TEMPERATURE GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
            dirName = directory_name

            temp_scale_warm, temp_scale_cool = parsers.NDFD.get_minimum_temperature_color_scale(dirName)
        
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(dirName, 'ds.mint.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.mint.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')
        
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.mint.bin')
    
            lons = lons_1
            lats = lats_1
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
        
                fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature", fontweight='bold')
        
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
        
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                    
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour >= 14 or utc_time.hour < 11:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
             
                if utc_time.hour >= 11 and utc_time.hour < 14:
        
                    fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature", fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 3:
    
                if utc_time.hour >= 14 or utc_time.hour < 11:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 11 and utc_time.hour < 14:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 4:
    
                if utc_time.hour >= 14 or utc_time.hour < 11:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 11 and utc_time.hour < 14:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
        
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature Trend \N{DEGREE SIGN}F)", fontweight='bold')
        
            if files >= 5:
    
                if utc_time.hour >= 14 or utc_time.hour < 11:
        
                    fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature Trend(\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(PSAs, linewidth=1.25)
                    ax4.set_title('Day 5 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs4 = ax4.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
                if utc_time.hour >= 11 and utc_time.hour < 14:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
        
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    if utc_time.month >= 4 and utc_time.month <= 10:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                    if utc_time.month >= 11 or utc_time.month <= 3:
                        cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs2 = ax2.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs3 = ax3.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            return fig
    
    
        def plot_minimum_temperature_extended_forecast_and_trends(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS THE MINIMUM TEMPERATURE FORECAST FOR THE FIRST PERIOD, THEN THE MAXIMUM TEMPERATURE FORECAST TRENDS FOR THE NEXT PERIODS.
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MINIMUM TEMPERATURE GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
            dirName = directory_name

            temp_scale_warm, temp_scale_cool = parsers.NDFD.get_minimum_temperature_color_scale(dirName)
        
            extended_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(dirName, 'ds.mint.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, 'ds.mint.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')
        
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.mint.bin')
    
            lons = lons_1
            lats = lats_1
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
        
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Temperature", fontweight='bold')
        
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
        
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs = ax.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                    
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 2:
        
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files == 4:
        
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1.25)
                ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                        
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            if files >= 5:
        
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Temperature & Minimum Temperature Trends", fontweight='bold')
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 00Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 12Z'), fontweight='bold')
            
                if utc_time.month >= 4 and utc_time.month <= 10:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_warm, cmap='seismic', transform=datacrs)
        
                if utc_time.month >= 11 or utc_time.month <= 3:
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=temp_scale_cool, cmap='seismic', transform=datacrs)
                        
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Minimum Temperature (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Minimum Temperature Trend(\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1.25)
                ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
                        
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(PSAs, linewidth=1.25)
                ax4.set_title('Day 5 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs4 = ax4.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-30, 31, 1), cmap='seismic', transform=datacrs)
        
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Minimum Temperature Trend (\N{DEGREE SIGN}F)", fontweight='bold')
        
            return fig
        
        
        def plot_minimum_relative_humidity_short_term_forecast_and_trends(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS THE NWS FORECAST MINIMUM RELATIVE HUMIDITY AND THE MINIMUM RELATIVE HUMIDITY FORECAST TRENDS
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MIN RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
        
            short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, 'ds.minrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.minrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')
        
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.minrh.bin')
    
            lons = lons_1
            lats = lats_1
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
                
                if utc_time.hour > 6 and utc_time.hour <= 21:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
         
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
             
                if utc_time.hour >= 22 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
                    
                    ax0 = plt.subplot(1, 1, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                    cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 3:
                
                if utc_time.hour > 6 and utc_time.hour <= 21:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
                if utc_time.hour >= 22 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                    fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files == 4:
    
                if utc_time.hour > 6 and utc_time.hour <= 21:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink) 
                    cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
                if utc_time.hour >= 22 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                    fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
                    ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files >= 5:
        
                if utc_time.hour > 6 and utc_time.hour <= 21:
        
                    fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                    fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                    ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax4.add_feature(PSAs, linewidth=1.25)
                    ax4.set_title('Day 5 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs4 = ax4.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                    cbar4.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
                if utc_time.hour >= 22 or utc_time.hour < 6:
        
                    fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                    fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                    fig.suptitle("National Weather Service Short-Term Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                    ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                    ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax0.add_feature(PSAs, linewidth=1.25)
                    ax0.set_title('Day 1 Forecast\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs0 = ax0.contourf(lons, lats, grb_2_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                    cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                    cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                    ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                    ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax1.add_feature(PSAs, linewidth=1.25)
                    ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs1 = ax1.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                    cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                    ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax2.add_feature(PSAs, linewidth=1.25)
                    ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs2 = ax2.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                    cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                    ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                    ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                    ax3.add_feature(PSAs, linewidth=1.25)
                    ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                    cs3 = ax3.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                    cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                    cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            return fig
    
    
        def plot_minimum_relative_humidity_extended_forecast_and_trends(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink): 
        
            r'''
            THIS FUNCTION PLOTS THE NWS FORECAST MINIMUM RELATIVE HUMIDITY AND THE MINIMUM RELATIVE HUMIDITY FORECAST TRENDS
        
            IN ORDER FOR THIS FUNCTION TO WORK PROPERLY, USER NEEDS TO MAKE SURE THEIR PARAMETER IS SET TO THE MIN RELATIVE HUMIDITY GRIDS
        
            THE FOLLOWING IS CUSTOMIZABLE BY THE USER:
            1. LATITUDE/LONGITUDE BOUNDS OF THE PLOT
            2. CENTRAL LATITUDE/LONGITUDE AND STANDARD PARALLELS FOR PLOT
        
            PYTHON MODULE DEPENDENCIES:
            1. CARTOPY
            2. METPY
            3. NUMPY
            4. MATPLOTLIB
        
            COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023
            '''
        
            extended_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, 'ds.minrh.bin')
            
            first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(extended_data, 'ds.minrh.bin')
        
            local_time, utc_time = standard.plot_creation_time()
            grid_time_interval = 12
            
            files = count_of_GRIB_files
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()
    
            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')
        
            grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.minrh.bin')
    
            lons = lons_1
            lats = lats_1
           
            if files == 1:
        
                fig = plt.figure(figsize=(fig_x_length_1, fig_y_length_1))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
                
                ax = plt.subplot(1, 1, 1, projection=mapcrs)
                ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax.add_feature(PSAs, linewidth=1.25)
                ax.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
        
                cs = ax.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar = fig.colorbar(cs, shrink=color_table_shrink)
                cbar.set_label(label="Relative Humidity (%)", fontweight='bold')
        
            if files == 2:
        
                fig = plt.figure(figsize=(fig_x_length_2, fig_y_length_2))
                fig.text(0.13, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
         
                ax0 = plt.subplot(1, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
             
            if files == 3:
        
                fig = plt.figure(figsize=(fig_x_length_3, fig_y_length_3))
                fig.text(0.26, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                ax0 = plt.subplot(1, 3, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 3, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 3, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files == 4:
    
                fig = plt.figure(figsize=(fig_x_length_4, fig_y_length_4))
                fig.text(0.17, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                ax0 = plt.subplot(2, 2, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(2, 2, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax2 = plt.subplot(2, 2, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax3 = plt.subplot(2, 2, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1.25)
                ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink) 
                cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            if files >= 5:
    
                fig = plt.figure(figsize=(fig_x_length_5, fig_y_length_5))
                fig.text(0.40, 0.08, 'Plot Created With FireWxPy (C) Eric J. Drewitz 2023 | Data Source: NOAA/NWS/NDFD\n               Image Created: ' + local_time.strftime('%m/%d/%Y %H:%M Local') + ' | ' + utc_time.strftime('%m/%d/%Y %H:%M UTC'), fontweight='bold')
                fig.suptitle("National Weather Service Extended Forecast\nMinimum Relative Humidity & Minimum Relative Humidity Trend", fontweight='bold')
        
                ax0 = plt.subplot(1, 5, 1, projection=mapcrs)
                ax0.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax0.add_feature(PSAs, linewidth=1.25)
                ax0.set_title('Day 1 Forecast\nStart: ' + grb_1_start.strftime('%m/%d/%Y 18Z') + '\nEnd: ' + grb_1_end.strftime('%m/%d/%Y 06Z'), fontweight='bold')
            
                cs0 = ax0.contourf(lons, lats, grb_1_vals, levels=np.arange(0, 105, 5), cmap='YlGnBu', transform=datacrs)
                cbar0 = fig.colorbar(cs0, shrink=color_table_shrink)
                cbar0.set_label(label="Relative Humidity (%)", fontweight='bold')
            
                ax1 = plt.subplot(1, 5, 2, projection=mapcrs)
                ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax1.add_feature(PSAs, linewidth=1.25)
                ax1.set_title('Day 2 Forecast Trend\nStart: ' + grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_2_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs1 = ax1.contourf(lons, lats, grb_2_vals - grb_1_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar1 = fig.colorbar(cs1, shrink=color_table_shrink)
                cbar1.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax2 = plt.subplot(1, 5, 3, projection=mapcrs)
                ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax2.add_feature(PSAs, linewidth=1.25)
                ax2.set_title('Day 3 Forecast Trend\nStart: ' + grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_3_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs2 = ax2.contourf(lons, lats, grb_3_vals - grb_2_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar2 = fig.colorbar(cs2, shrink=color_table_shrink)
                cbar2.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax3 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax3.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax3.add_feature(PSAs, linewidth=1.25)
                ax3.set_title('Day 4 Forecast Trend\nStart: ' + grb_4_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_4_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs3 = ax3.contourf(lons, lats, grb_4_vals - grb_3_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar3 = fig.colorbar(cs3, shrink=color_table_shrink)
                cbar3.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
            
                ax4 = plt.subplot(1, 5, 4, projection=mapcrs)
                ax4.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
                ax4.add_feature(PSAs, linewidth=1.25)
                ax4.set_title('Day 5 Forecast Trend\nStart: ' + grb_5_start.strftime('%m/%d/%Y %HZ') + '\nEnd: ' + grb_5_end.strftime('%m/%d/%Y %HZ'), fontweight='bold')
            
                cs4 = ax4.contourf(lons, lats, grb_5_vals - grb_4_vals, levels=np.arange(-60, 65, 5), cmap='BrBG', transform=datacrs)
                cbar4 = fig.colorbar(cs4, shrink=color_table_shrink)
                cbar4.set_label(label="Relative Humidity Trend (%)", fontweight='bold')
        
            return fig

    

class Storm_Prediction_Center_Fire_Weather_Outlook:

    r'''
    THIS CLASS HOSTS FUNCTIONS DEDICATED TO PLOTTING THE STORM PREDICTION CENTER CRITICAL FIRE WEATHER AND DRY LIGHTING OUTLOOKS. 

    '''
    
    
    def plot_SPC_critical_fire_weather_risk_outlook_states_with_counties(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink):
    
        r'''
        THIS FUNCTION PLOTS THE NOAA/NWS STORM PREDICTION CENTER'S CRITICAL FIRE WEATHER RISK OUTLOOK
    
        ALTHOUGH THE BOUNDS OF THE PLOT ARE CUSTOMIZED BY THE USER, THE RECOMMENDED SETTING TO CAPTURE CONUS IS:
    
        NORTH = 51
        SOUTH = 20
        EAST = -65
        WEST = -125 
    
        THIS PRODUCT IS NOT AVAILABLE FOR ALASKA OR HAWAII
    
        RETURNS: FIGURES SHOWING THE SPC CRITICAL FIRE WEATHER RISK FOR EACH DAY
    
        PYTHON PACKAGE DEPENDENCIES:
        1) MATPLOTLIB
        2) PYGRIB
        3) NUMPY
        4) CARTOPY
    
        COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023    
        '''
        
        short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, 'ds.critfireo.bin')
            
        first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.critfireo.bin')
        
        local_time, utc_time = standard.plot_creation_time()
        grid_time_interval = 12
            
        files = count_of_GRIB_files
        mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
        datacrs = ccrs.PlateCarree()
        
        grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.critfireo.bin')
    
        ####################################
        ##### DAY 1 FIGURE #################
        ####################################
        if files == 1:
            
            fig = plt.figure(figsize=(9,5))
            fig.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig.text(0.60, 0.88, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
        
            ax = fig.add_subplot(1, 1, 1, projection=mapcrs)
            ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.add_feature(USCOUNTIES, linewidth=0.75)
            ax.set_title('Critical Fire Wx Forecast (Day 1)\nStart: '+ grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_1_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs = ax.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar = fig.colorbar(cs, shrink=0.80)
            cbar.set_label(label="Critical Fire Weather Risk", fontweight='bold')
    
            fig1 = None
            fig2 = None
        
        ####################################
        ##### DAY 2 FIGURE #################
        ####################################    
        if files == 2:
    
            fig = plt.figure(figsize=(9,5))
            fig.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig.text(0.60, 0.88, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
        
            ax = fig.add_subplot(1, 1, 1, projection=mapcrs)
            ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.add_feature(USCOUNTIES, linewidth=0.75)
            ax.set_title('Critical Fire Wx Forecast (Day 1)\nStart: '+ grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_1_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs = ax.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar = fig.colorbar(cs, shrink=0.80)
            cbar.set_label(label="Critical Fire Weather Risk", fontweight='bold')
            
            fig1 = plt.figure(figsize=(9,5))
            fig1.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig1.text(0.60, 0.88, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
            
            ax1 = fig1.add_subplot(1, 1, 1, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax1.add_feature(cfeature.STATES, linewidth=0.5)
            ax1.add_feature(USCOUNTIES, linewidth=0.75)
            ax1.set_title('Critical Fire Wx Forecast (Day 2)\nStart: '+ grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_2_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar1 = fig1.colorbar(cs1, shrink=0.80)
            cbar1.set_label(label="Critical Fire Weather Risk", fontweight='bold')
    
            fig3 = None
            
        ####################################
        ##### DAY 3 FIGURE #################
        ####################################     
        if files == 3:
    
            fig = plt.figure(figsize=(9,5))
            fig.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig.text(0.60, 0.85, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
        
            ax = fig.add_subplot(1, 1, 1, projection=mapcrs)
            ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.add_feature(USCOUNTIES, linewidth=0.75)
            ax.set_title('Critical Fire Wx Forecast (Day 1)\nStart: '+ grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_1_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs = ax.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar = fig.colorbar(cs, shrink=0.80)
            cbar.set_label(label="Critical Fire Weather Risk", fontweight='bold')
            
            fig1 = plt.figure(figsize=(9,5))
            fig1.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig1.text(0.60, 0.85, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
            
            ax1 = fig1.add_subplot(1, 1, 1, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax1.add_feature(cfeature.STATES, linewidth=0.5)
            ax1.add_feature(USCOUNTIES, linewidth=0.75)
            ax1.set_title('Critical Fire Wx Forecast (Day 2)\nStart: '+ grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_2_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar1 = fig1.colorbar(cs1, shrink=0.80)
            cbar1.set_label(label="Critical Fire Weather Risk", fontweight='bold')
            
            fig2 = plt.figure(figsize=(9,5))
            fig2.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig2.text(0.60, 0.85, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
        
            ax2 = fig2.add_subplot(1, 1, 1, projection=mapcrs)
            ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax2.add_feature(cfeature.STATES, linewidth=0.5)
            ax2.add_feature(USCOUNTIES, linewidth=0.75)
            ax2.set_title('Critical Fire Wx Forecast (Days 3-8)\nStart: '+ grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_3_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar2 = fig2.colorbar(cs2, shrink=0.80)
            cbar2.set_label(label="Critical Fire Weather Risk", fontweight='bold')
    
        if files > 3:
    
            fig = plt.figure(figsize=(9,5))
            fig.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig.text(0.60, 0.85, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
        
            ax = fig.add_subplot(1, 1, 1, projection=mapcrs)
            ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.add_feature(USCOUNTIES, linewidth=0.75)
            ax.set_title('Critical Fire Wx Forecast (Day 2)\nStart: '+ grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_1_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs = ax.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar = fig.colorbar(cs, shrink=0.80)
            cbar.set_label(label="Critical Fire Weather Risk", fontweight='bold')
            
            fig1 = plt.figure(figsize=(9,5))
            fig1.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig1.text(0.60, 0.85, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
            
            ax1 = fig1.add_subplot(1, 1, 1, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax1.add_feature(cfeature.STATES, linewidth=0.5)
            ax1.add_feature(USCOUNTIES, linewidth=0.75)
            ax1.set_title('Critical Fire Wx Forecast (Days 3-8)\nStart: '+ grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_2_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar1 = fig1.colorbar(cs1, shrink=0.80)
            cbar1.set_label(label="Critical Fire Weather Risk", fontweight='bold')
            
            fig2 = None
    
        return fig, fig1, fig2


    def plot_SPC_critical_fire_weather_risk_outlook_states_only(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink):
    
        r'''
        THIS FUNCTION PLOTS THE NOAA/NWS STORM PREDICTION CENTER'S CRITICAL FIRE WEATHER RISK OUTLOOK
    
        ALTHOUGH THE BOUNDS OF THE PLOT ARE CUSTOMIZED BY THE USER, THE RECOMMENDED SETTING TO CAPTURE CONUS IS:
    
        NORTH = 51
        SOUTH = 20
        EAST = -65
        WEST = -125 
    
        THIS PRODUCT IS NOT AVAILABLE FOR ALASKA OR HAWAII
    
        RETURNS: FIGURES SHOWING THE SPC CRITICAL FIRE WEATHER RISK FOR EACH DAY
    
        PYTHON PACKAGE DEPENDENCIES:
        1) MATPLOTLIB
        2) PYGRIB
        3) NUMPY
        4) CARTOPY
    
        COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023    
        '''
        
        short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, 'ds.critfireo.bin')
            
        first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.critfireo.bin')
        
        local_time, utc_time = standard.plot_creation_time()
        grid_time_interval = 12
            
        files = count_of_GRIB_files
        mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
        datacrs = ccrs.PlateCarree()
        
        grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.critfireo.bin')
    
        ####################################
        ##### DAY 1 FIGURE #################
        ####################################
        if files == 1:
            
            fig = plt.figure(figsize=(9,5))
            fig.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig.text(0.60, 0.88, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
        
            ax = fig.add_subplot(1, 1, 1, projection=mapcrs)
            ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.set_title('Critical Fire Wx Forecast (Day 1)\nStart: '+ grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_1_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs = ax.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar = fig.colorbar(cs, shrink=0.80)
            cbar.set_label(label="Critical Fire Weather Risk", fontweight='bold')
    
            fig1 = None
            fig2 = None
        
        ####################################
        ##### DAY 2 FIGURE #################
        ####################################    
        if files == 2:
    
            fig = plt.figure(figsize=(9,5))
            fig.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig.text(0.60, 0.88, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
        
            ax = fig.add_subplot(1, 1, 1, projection=mapcrs)
            ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.set_title('Critical Fire Wx Forecast (Day 1)\nStart: '+ grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_1_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs = ax.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar = fig.colorbar(cs, shrink=0.80)
            cbar.set_label(label="Critical Fire Weather Risk", fontweight='bold')
            
            fig1 = plt.figure(figsize=(9,5))
            fig1.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig1.text(0.60, 0.88, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
            
            ax1 = fig1.add_subplot(1, 1, 1, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax1.add_feature(cfeature.STATES, linewidth=0.5)
            ax1.set_title('Critical Fire Wx Forecast (Day 2)\nStart: '+ grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_2_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar1 = fig1.colorbar(cs1, shrink=0.80)
            cbar1.set_label(label="Critical Fire Weather Risk", fontweight='bold')
    
            fig3 = None
            
        ####################################
        ##### DAY 3 FIGURE #################
        ####################################     
        if files == 3:
    
            fig = plt.figure(figsize=(9,5))
            fig.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig.text(0.60, 0.85, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
        
            ax = fig.add_subplot(1, 1, 1, projection=mapcrs)
            ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.set_title('Critical Fire Wx Forecast (Day 1)\nStart: '+ grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_1_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs = ax.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar = fig.colorbar(cs, shrink=0.80)
            cbar.set_label(label="Critical Fire Weather Risk", fontweight='bold')
            
            fig1 = plt.figure(figsize=(9,5))
            fig1.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig1.text(0.60, 0.85, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
            
            ax1 = fig1.add_subplot(1, 1, 1, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax1.add_feature(cfeature.STATES, linewidth=0.5)
            ax1.set_title('Critical Fire Wx Forecast (Day 2)\nStart: '+ grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_2_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar1 = fig1.colorbar(cs1, shrink=0.80)
            cbar1.set_label(label="Critical Fire Weather Risk", fontweight='bold')
            
            fig2 = plt.figure(figsize=(9,5))
            fig2.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig2.text(0.60, 0.85, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
        
            ax2 = fig2.add_subplot(1, 1, 1, projection=mapcrs)
            ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax2.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax2.add_feature(cfeature.STATES, linewidth=0.5)
            ax2.set_title('Critical Fire Wx Forecast (Days 3-8)\nStart: '+ grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_3_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar2 = fig2.colorbar(cs2, shrink=0.80)
            cbar2.set_label(label="Critical Fire Weather Risk", fontweight='bold')
    
        if files > 3:
    
            fig = plt.figure(figsize=(9,5))
            fig.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig.text(0.60, 0.85, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
        
            ax = fig.add_subplot(1, 1, 1, projection=mapcrs)
            ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.set_title('Critical Fire Wx Forecast (Day 2)\nStart: '+ grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_1_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs = ax.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar = fig.colorbar(cs, shrink=0.80)
            cbar.set_label(label="Critical Fire Weather Risk", fontweight='bold')
            
            fig1 = plt.figure(figsize=(9,5))
            fig1.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig1.text(0.60, 0.85, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
            
            ax1 = fig1.add_subplot(1, 1, 1, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax1.add_feature(cfeature.STATES, linewidth=0.5)
            ax1.set_title('Critical Fire Wx Forecast (Days 3-8)\nStart: '+ grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_2_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar1 = fig1.colorbar(cs1, shrink=0.80)
            cbar1.set_label(label="Critical Fire Weather Risk", fontweight='bold')
            
            fig2 = None
    
        return fig, fig1, fig2


    def plot_SPC_critical_fire_weather_risk_outlook_predictive_services_areas(directory_name, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length_1, fig_y_length_1, fig_x_length_2, fig_y_length_2, fig_x_length_3, fig_y_length_3, fig_x_length_4, fig_y_length_4, fig_x_length_5, fig_y_length_5, color_table_shrink):
    
        r'''
        THIS FUNCTION PLOTS THE NOAA/NWS STORM PREDICTION CENTER'S CRITICAL FIRE WEATHER RISK OUTLOOK
    
        ALTHOUGH THE BOUNDS OF THE PLOT ARE CUSTOMIZED BY THE USER, THE RECOMMENDED SETTING TO CAPTURE CONUS IS:
    
        NORTH = 51
        SOUTH = 20
        EAST = -65
        WEST = -125 
    
        THIS PRODUCT IS NOT AVAILABLE FOR ALASKA OR HAWAII
    
        RETURNS: FIGURES SHOWING THE SPC CRITICAL FIRE WEATHER RISK FOR EACH DAY
    
        PYTHON PACKAGE DEPENDENCIES:
        1) MATPLOTLIB
        2) PYGRIB
        3) NUMPY
        4) CARTOPY
    
        COPYRIGHT (C) METEOROLOGIST ERIC J. DREWITZ 2023    
        '''
        
        short_term_data = da.FTP_Downloads.get_NWS_NDFD_short_term_grid_data(directory_name, 'ds.critfireo.bin')
            
        first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files = parsers.NDFD.sort_GRIB_files(short_term_data, 'ds.critfireo.bin')
        
        local_time, utc_time = standard.plot_creation_time()
        grid_time_interval = 12
            
        files = count_of_GRIB_files
        mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
        datacrs = ccrs.PlateCarree()

        PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')
        
        grb_1_vals, grb_1_start, grb_1_end, grb_2_vals, grb_2_start, grb_2_end, grb_3_vals, grb_3_start, grb_3_end, grb_4_vals, grb_4_start, grb_4_end, grb_5_vals, grb_5_start, grb_5_end, lats_1, lons_1, lats_2, lons_2, lats_3, lons_3, lats_4, lons_4, lats_5, lons_5 = parsers.NDFD.parse_GRIB_files(first_GRIB_file, second_GRIB_file, third_GRIB_file, fourth_GRIB_file, fifth_GRIB_file, count_of_GRIB_files, grid_time_interval, 'ds.critfireo.bin')
    
        ####################################
        ##### DAY 1 FIGURE #################
        ####################################
        if files == 1:
            
            fig = plt.figure(figsize=(9,5))
            fig.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig.text(0.60, 0.88, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
        
            ax = fig.add_subplot(1, 1, 1, projection=mapcrs)
            ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax.add_feature(PSAs, linewidth=0.75)
            ax.set_title('Critical Fire Wx Forecast (Day 1)\nStart: '+ grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_1_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs = ax.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar = fig.colorbar(cs, shrink=0.80)
            cbar.set_label(label="Critical Fire Weather Risk", fontweight='bold')
    
            fig1 = None
            fig2 = None
        
        ####################################
        ##### DAY 2 FIGURE #################
        ####################################    
        if files == 2:
    
            fig = plt.figure(figsize=(9,5))
            fig.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig.text(0.60, 0.88, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
        
            ax = fig.add_subplot(1, 1, 1, projection=mapcrs)
            ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax.add_feature(PSAs, linewidth=0.75)
            ax.set_title('Critical Fire Wx Forecast (Day 1)\nStart: '+ grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_1_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs = ax.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar = fig.colorbar(cs, shrink=0.80)
            cbar.set_label(label="Critical Fire Weather Risk", fontweight='bold')
            
            fig1 = plt.figure(figsize=(9,5))
            fig1.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig1.text(0.60, 0.88, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
            
            ax1 = fig1.add_subplot(1, 1, 1, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(PSAs, linewidth=0.75)
            ax1.set_title('Critical Fire Wx Forecast (Day 2)\nStart: '+ grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_2_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar1 = fig1.colorbar(cs1, shrink=0.80)
            cbar1.set_label(label="Critical Fire Weather Risk", fontweight='bold')
    
            fig3 = None
            
        ####################################
        ##### DAY 3 FIGURE #################
        ####################################     
        if files == 3:
    
            fig = plt.figure(figsize=(9,5))
            fig.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig.text(0.60, 0.85, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
        
            ax = fig.add_subplot(1, 1, 1, projection=mapcrs)
            ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax.add_feature(PSAs, linewidth=0.75)
            ax.set_title('Critical Fire Wx Forecast (Day 1)\nStart: '+ grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_1_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs = ax.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar = fig.colorbar(cs, shrink=0.80)
            cbar.set_label(label="Critical Fire Weather Risk", fontweight='bold')
            
            fig1 = plt.figure(figsize=(9,5))
            fig1.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig1.text(0.60, 0.85, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
            
            ax1 = fig1.add_subplot(1, 1, 1, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(PSAs, linewidth=0.75)
            ax1.set_title('Critical Fire Wx Forecast (Day 2)\nStart: '+ grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_2_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar1 = fig1.colorbar(cs1, shrink=0.80)
            cbar1.set_label(label="Critical Fire Weather Risk", fontweight='bold')
            
            fig2 = plt.figure(figsize=(9,5))
            fig2.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig2.text(0.60, 0.85, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
        
            ax2 = fig2.add_subplot(1, 1, 1, projection=mapcrs)
            ax2.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax2.add_feature(PSAs, linewidth=0.75)
            ax2.set_title('Critical Fire Wx Forecast (Days 3-8)\nStart: '+ grb_3_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_3_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs2 = ax2.contourf(lons_3, lats_3, grb_3_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar2 = fig2.colorbar(cs2, shrink=0.80)
            cbar2.set_label(label="Critical Fire Weather Risk", fontweight='bold')
    
        if files > 3:
    
            fig = plt.figure(figsize=(9,5))
            fig.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig.text(0.60, 0.85, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
        
            ax = fig.add_subplot(1, 1, 1, projection=mapcrs)
            ax.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax.add_feature(PSAs, linewidth=0.75)
            ax.set_title('Critical Fire Wx Forecast (Day 2)\nStart: '+ grb_1_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_1_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs = ax.contourf(lons_1, lats_1, grb_1_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar = fig.colorbar(cs, shrink=0.80)
            cbar.set_label(label="Critical Fire Weather Risk", fontweight='bold')
            
            fig1 = plt.figure(figsize=(9,5))
            fig1.text(0.13, 0.06, 'Developed by: Eric Drewitz - Powered by MetPy | Data Source: NOAA/NWS/SPC\nImage Created: ' + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            fig1.text(0.60, 0.85, 'Risk Index\n4-6 (Yellow) - Elevated\n6-8 (Orange) - Critical\n8-10 (Red) - Extreme', fontsize=8, fontweight='bold')
            
            ax1 = fig1.add_subplot(1, 1, 1, projection=mapcrs)
            ax1.set_extent([western_bound, eastern_bound, southern_bound, northern_bound], datacrs)
            ax1.add_feature(PSAs, linewidth=0.75)
            ax1.set_title('Critical Fire Wx Forecast (Days 3-8)\nStart: '+ grb_2_start.strftime('%m/%d/%Y %HZ') + '\nEnd:'+ grb_2_end.strftime('%m/%d/%Y %HZ'), fontsize=10, fontweight='bold', loc='center')
                
            cs1 = ax1.contourf(lons_2, lats_2, grb_2_vals, levels=np.arange(4, 12, 2), cmap='YlOrRd', transform=datacrs)
            cbar1 = fig1.colorbar(cs1, shrink=0.80)
            cbar1.set_label(label="Critical Fire Weather Risk", fontweight='bold')
            
            fig2 = None
    
        return fig, fig1, fig2


class Real_Time_Mesoscale_Analysis_Counties_Perspective:

    r'''

    THIS CLASS HOSTS PLOTTING FUNCTIONS TO PLOT THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA

    THE IMAGES IN THIS CLASS OVERLAY A STATE AND COUNTIES PERSPECTIVE AS THE REFERENCE FOR THE PLOTS

    (C) METEOROLOGIST ERIC J. DREWITZ 2023

    '''
    class CONUS:

        r'''
        THIS NESTED CLASS HOSTS THE IMAGES FOR CONUS AKA THE "LOWER-48"
        '''

        def plot_generic_real_time_mesoanalysis_no_METARs(parameter, plot_title, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table, color_table_title, color_table_start, color_table_stop, color_table_step, color_table_shrink):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. 

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()
            param = parameter

            if param == 'Wind_speed_gust_Analysis_height_above_ground' or param == 'Wind_speed_Analysis_height_above_ground' or param == 'Wind_speed_error_height_above_ground' or param == 'Wind_speed_gust_error_height_above_ground' or param == 'u-component_of_wind_Analysis_height_above_ground' or param == 'v-component_of_wind_Analysis_height_above_ground':

                data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_data(utc_time, param)
                data = data * 2.23694

            if param == 'Temperature_Analysis_height_above_ground' or param == 'Dewpoint_temperature_Analysis_height_above_ground' or param == 'Temperature_error_height_above_ground' or param == 'Dewpoint_temperature_error_height_above_ground':
                
                data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_data(utc_time, param)
                data = calc.unit_conversion.RTMA_Temperature_Data_or_Dewpoint_Data_Kelvin_to_Fahrenheit(data)
                

            else:
                data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_data(utc_time, param)
                
            plot_proj = data.metpy.cartopy_crs
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.add_feature(USCOUNTIES, linewidth=0.75)

            cs = ax.contourf(data.metpy.x, data.metpy.y, data, 
                             transform=data.metpy.cartopy_crs, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, alpha=0.5)

            cbar = fig.colorbar(cs, shrink=color_table_shrink)
            cbar.set_label(label=color_table_title, size=12, fontweight='bold')

            plt.title(plot_title + "\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + " | Image Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.045, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig


        def plot_generic_real_time_mesoanalysis_with_METARs(parameter, plot_title, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table, color_table_title, color_table_start, color_table_stop, color_table_step, color_table_shrink, mask):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. 

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()
            param = parameter

            if param == 'Wind_speed_gust_Analysis_height_above_ground' or param == 'Wind_speed_Analysis_height_above_ground' or param == 'Wind_speed_error_height_above_ground' or param == 'Wind_speed_gust_error_height_above_ground' or param == 'u-component_of_wind_Analysis_height_above_ground' or param == 'v-component_of_wind_Analysis_height_above_ground':

               rtma_data, rtma_time, sfc_data, sfc_data_u_kt, sfc_data_v_kt, sfc_data_rh, sfc_data_mask, metar_time_revised, plot_proj = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.METARs.RTMA_Synced_With_METAR(param, utc_time, mask)
               rtma_data = rtma_data * 2.23694

            if param == 'Temperature_Analysis_height_above_ground' or param == 'Dewpoint_temperature_Analysis_height_above_ground' or param == 'Temperature_error_height_above_ground' or param == 'Dewpoint_temperature_error_height_above_ground':
                
                rtma_data, rtma_time, sfc_data, sfc_data_u_kt, sfc_data_v_kt, sfc_data_rh, sfc_data_mask, metar_time_revised, plot_proj = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.METARs.RTMA_Synced_With_METAR(param, utc_time, mask)
                rtma_data = calc.unit_conversion.RTMA_Temperature_Data_or_Dewpoint_Data_Kelvin_to_Fahrenheit(rtma_data)
                

            else:
               rtma_data, rtma_time, sfc_data, sfc_data_u_kt, sfc_data_v_kt, sfc_data_rh, sfc_data_mask, metar_time_revised, plot_proj = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.METARs.RTMA_Synced_With_METAR(param, utc_time, mask)
                
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.add_feature(USCOUNTIES, linewidth=0.75)

            cs = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, alpha=0.5)

            cbar = fig.colorbar(cs, shrink=color_table_shrink)
            cbar.set_label(label=color_table_title, size=12, fontweight='bold')

            # Plots METAR
            stn = mpplots.StationPlot(ax, sfc_data['longitude'][sfc_data_mask].m, sfc_data['latitude'][sfc_data_mask].m,
                                     transform=ccrs.PlateCarree(), fontsize=11, zorder=10, clip_on=True)
            
            
            stn.plot_parameter('NW', sfc_data['air_temperature'].to('degF')[sfc_data_mask], color='red',
                              path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_parameter('SW', sfc_data['dew_point_temperature'].to('degF')[sfc_data_mask], color='blue',
                              path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_symbol('C', sfc_data['cloud_coverage'][sfc_data_mask], mpplots.sky_cover)
            
            stn.plot_parameter('E', sfc_data_rh.to('percent')[sfc_data_mask], color='lime',
                                path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_barb(sfc_data['u'][sfc_data_mask], sfc_data['v'][sfc_data_mask])

            plt.title(plot_title + "\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\n\nMETAR Observations\nValid: " + metar_time_revised.strftime('%m/%d/%Y %HZ') +"\n\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.045, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig



        def plot_relative_humidity_with_METARs(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink, mask):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. 

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time, sfc_data, sfc_data_u_kt, sfc_data_v_kt, sfc_data_rh, sfc_data_mask, metar_time_revised, plot_proj = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.METARs.RTMA_Relative_Humidity_Synced_With_METAR(utc_time, mask)
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.add_feature(USCOUNTIES, linewidth=0.75)

            cs = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(0, 105, 5), cmap='YlGnBu', alpha=0.5)

            cbar = fig.colorbar(cs, shrink=color_table_shrink)
            cbar.set_label(label="Relative Humidity (%)", size=12, fontweight='bold')

            # Plots METAR
            stn = mpplots.StationPlot(ax, sfc_data['longitude'][sfc_data_mask].m, sfc_data['latitude'][sfc_data_mask].m,
                                     transform=ccrs.PlateCarree(), fontsize=11, zorder=10, clip_on=True)
            
            
            stn.plot_parameter('NW', sfc_data['air_temperature'].to('degF')[sfc_data_mask], color='red',
                              path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_parameter('SW', sfc_data['dew_point_temperature'].to('degF')[sfc_data_mask], color='darkorange',
                              path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_symbol('C', sfc_data['cloud_coverage'][sfc_data_mask], mpplots.sky_cover)
            
            stn.plot_parameter('E', sfc_data_rh.to('percent')[sfc_data_mask], color='lime',
                                path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_barb(sfc_data['u'][sfc_data_mask], sfc_data['v'][sfc_data_mask])

            plt.title("Real Time Mesoscale Analysis Relative Humidity\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\n\nMETAR Observations\nValid: " + metar_time_revised.strftime('%m/%d/%Y %HZ') + "\n\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.045, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig


        def plot_red_flag_relative_humidity_with_METARs(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink, mask):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. THIS PLOT FILTERS THE RELATIVE HUMIDITY DATASET TO ONLY PLOT WHERE THE RELATIVE HUMIDITY IS 15% OR LESS. 

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time, sfc_data, sfc_data_u_kt, sfc_data_v_kt, sfc_data_rh, sfc_data_mask, metar_time_revised, plot_proj = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.METARs.RTMA_Relative_Humidity_Synced_With_METAR(utc_time, mask)
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.add_feature(USCOUNTIES, linewidth=0.75)

            cs = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', alpha=1)

            cbar = fig.colorbar(cs, shrink=color_table_shrink)
            cbar.set_label(label="Relative Humidity (%)", size=12, fontweight='bold')

            # Plots METAR
            stn = mpplots.StationPlot(ax, sfc_data['longitude'][sfc_data_mask].m, sfc_data['latitude'][sfc_data_mask].m,
                                     transform=ccrs.PlateCarree(), fontsize=11, zorder=10, clip_on=True)
            
            
            stn.plot_parameter('NW', sfc_data['air_temperature'].to('degF')[sfc_data_mask], color='red',
                              path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_parameter('SW', sfc_data['dew_point_temperature'].to('degF')[sfc_data_mask], color='darkorange',
                              path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_symbol('C', sfc_data['cloud_coverage'][sfc_data_mask], mpplots.sky_cover)
            
            stn.plot_parameter('E', sfc_data_rh.to('percent')[sfc_data_mask], color='lime',
                                path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_barb(sfc_data['u'][sfc_data_mask], sfc_data['v'][sfc_data_mask])

            plt.title("Real Time Mesoscale Analysis Red-Flag Relative Humidity (RH <=15%)\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\n\nMETAR Observations\nValid: " + metar_time_revised.strftime('%m/%d/%Y %HZ') + "\n\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.045, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig


        def plot_low_and_high_relative_humidity(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. THIS PLOT FILTERS THE RELATIVE HUMIDITY DATASET TO ONLY PLOT WHERE THE RELATIVE HUMIDITY IS 15% OR LESS. 

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_relative_humidity_data(utc_time)
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            plot_proj = rtma_data.metpy.cartopy_crs

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.add_feature(USCOUNTIES, linewidth=0.75)

            cs_low = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', alpha=1)

            cs_high = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(80, 101, 1), cmap='Greens', alpha=1)

            cbar_low = fig.colorbar(cs_low, location='left', shrink=color_table_shrink, pad=0.03)
            cbar_low.set_label(label="Low Relative Humidity (RH <= 15%)", size=12, fontweight='bold')

            cbar_high = fig.colorbar(cs_high, location='right', shrink=color_table_shrink, pad=0.03)
            cbar_high.set_label(label="High Relative Humidity (RH >= 80%)", size=12, fontweight='bold')


            plt.title("2.5km Real Time Mesoscale Analysis\nLow RH(<=15%) & High RH (RH >= 80%)\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.051, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig


        def plot_24_hour_relative_humidity_change(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. THIS PLOT COMPARES THE RELATIVE HUMIDITY FROM THE CURRENT TIME AND THE RELATIVE HUMIDITY FROM 24 HOURS AGO AND PLOTS THE 24 HOUR RELATIVE HUMIDITY CHANGE

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_rtma_relative_humidity_24_hour_difference_data(utc_time)
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            plot_proj = rtma_data.metpy.cartopy_crs

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.add_feature(USCOUNTIES, linewidth=0.75)

            cs = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(-60, 65, 5), cmap='BrBG', alpha=1)


            cbar = fig.colorbar(cs, shrink=color_table_shrink)
            cbar.set_label(label="Relative Humidity Change (%)", size=12, fontweight='bold')


            plt.title("24-Hour Relative Humidity Change (%)\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.051, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig


        def plot_24_hour_temperature_change(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. THIS PLOT COMPARES THE TEMPERATURE FROM THE CURRENT TIME AND THE TEMPERATURE FROM 24 HOURS AGO AND PLOTS THE 24 HOUR TEMPERATURE CHANGE

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_rtma_data_24_hour_difference(utc_time, 'Temperature_Analysis_height_above_ground')

            rtma_data = calc.unit_conversion.Temperature_Or_Dewpoint_Change_to_Fahrenheit(rtma_data)
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            plot_proj = rtma_data.metpy.cartopy_crs

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.add_feature(USCOUNTIES, linewidth=0.75)

            cs = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(-20, 21, 1), cmap='seismic', alpha=1)


            cbar = fig.colorbar(cs, shrink=color_table_shrink)
            cbar.set_label(label="Temperature Change (\N{DEGREE SIGN}F)", size=12, fontweight='bold')


            plt.title("24-Hour Temperature Change (\N{DEGREE SIGN}F)\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.051, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig


        def plot_24_hour_wind_speed_change(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. THIS PLOT COMPARES THE WIND SPEED FROM THE CURRENT TIME AND THE WIND SPEED FROM 24 HOURS AGO AND PLOTS THE 24 HOUR WIND SPEED CHANGE

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_rtma_data_24_hour_difference(utc_time, 'Wind_speed_Analysis_height_above_ground')

            rtma_data = rtma_data * 2.23694
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            plot_proj = rtma_data.metpy.cartopy_crs

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.add_feature(USCOUNTIES, linewidth=0.75)

            cs = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(-30, 31, 1), cmap='PuOr_r', alpha=1)


            cbar = fig.colorbar(cs, shrink=color_table_shrink)
            cbar.set_label(label="Wind Speed Change (MPH)", size=12, fontweight='bold')


            plt.title("24-Hour Wind Speed Change (MPH)\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.051, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig
            

        def plot_current_frost_freeze_areas(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. THIS PLOT SHOWS THE CURRENT AREAS EXPERIENCING BELOW FREEZING TEMPERATURES SINCE FROST/FREEZE CAN TURN LIVE FUEL INTO DEAD FUEL WHICH CAN ULTIMATELY LEAD TO MORE SUCCEPTABLE FUELS FOR WILDFIRE.

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_data(utc_time, 'Temperature_Analysis_height_above_ground')

            rtma_data = calc.unit_conversion.RTMA_Temperature_Data_or_Dewpoint_Data_Kelvin_to_Fahrenheit(rtma_data)
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            plot_proj = rtma_data.metpy.cartopy_crs

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.add_feature(USCOUNTIES, linewidth=0.75)

            cs = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(-10, 33, 1), cmap='cool_r', alpha=1)


            cbar = fig.colorbar(cs, shrink=color_table_shrink)
            cbar.set_label(label="Temperature (\N{DEGREE SIGN}F)", size=12, fontweight='bold')


            plt.title("Current Frost & Freeze Areas (T <= 32\N{DEGREE SIGN}F)\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.051, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig


        def plot_red_flag_criteria_based_on_sustained_winds(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. THIS PLOT COMPARES THE AREAS OF RED-FLAG RELATIVE HUMIDITY CRITERIA WITH RED-FLAG WIND CRITERIA BASED ON SUSTAINED WINDS. 

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_relative_humidity_data(utc_time)

            rtma_wind, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_data(utc_time, 'Wind_speed_Analysis_height_above_ground')

            rtma_wind = rtma_wind * 2.23694
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            plot_proj = rtma_data.metpy.cartopy_crs

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.add_feature(USCOUNTIES, linewidth=0.75)

            cs_rh = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', alpha=0.5)

            cs_wind = ax.contourf(rtma_wind.metpy.x, rtma_wind.metpy.y, rtma_wind, 
                             transform=rtma_wind.metpy.cartopy_crs, levels=np.arange(25, 100, 5), cmap='BuPu', alpha=0.5)


            cbar_rh = fig.colorbar(cs_rh, location='left', shrink=color_table_shrink, pad=0.03)
            cbar_rh.set_label(label="Relative Humidity (%)", size=12, fontweight='bold')

            cbar_wind = fig.colorbar(cs_wind, location='right', shrink=color_table_shrink, pad=0.03)
            cbar_wind.set_label(label="Wind Speed (MPH)", size=12, fontweight='bold')


            plt.title("Red-Flag Warning Conditions (RH <= 15% and Wind Speed >= 25 MPH)\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.051, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig


        def plot_red_flag_criteria_based_on_wind_gusts(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. THIS PLOT COMPARES THE AREAS OF RED-FLAG RELATIVE HUMIDITY CRITERIA WITH RED-FLAG WIND CRITERIA BASED ON WIND GUSTS. 

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_relative_humidity_data(utc_time)

            rtma_wind, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_data(utc_time, 'Wind_speed_gust_Analysis_height_above_ground')

            rtma_wind = rtma_wind * 2.23694
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            plot_proj = rtma_data.metpy.cartopy_crs

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(cfeature.COASTLINE.with_scale('50m'), linewidth=0.75)
            ax.add_feature(cfeature.STATES, linewidth=0.5)
            ax.add_feature(USCOUNTIES, linewidth=0.75)

            cs_rh = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', alpha=0.5)

            cs_wind = ax.contourf(rtma_wind.metpy.x, rtma_wind.metpy.y, rtma_wind, 
                             transform=rtma_wind.metpy.cartopy_crs, levels=np.arange(25, 100, 5), cmap='BuPu', alpha=0.5)


            cbar_rh = fig.colorbar(cs_rh, location='left', shrink=color_table_shrink, pad=0.03)
            cbar_rh.set_label(label="Relative Humidity (%)", size=12, fontweight='bold')

            cbar_wind = fig.colorbar(cs_wind, location='right', shrink=color_table_shrink, pad=0.03)
            cbar_wind.set_label(label="Wind Gust (MPH)", size=12, fontweight='bold')


            plt.title("Red-Flag Warning Conditions (RH <= 15% and Wind Gust >= 25 MPH)\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.051, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig

    
class Real_Time_Mesoscale_Analysis_Predictive_Services_Areas_Perspective:

    r'''

    THIS CLASS HOSTS PLOTTING FUNCTIONS TO PLOT THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA

    THE IMAGES IN THIS CLASS OVERLAY A PREDICTIVE SERVICES AREAS PERSPECTIVE AS THE REFERENCE FOR THE PLOTS

    (C) METEOROLOGIST ERIC J. DREWITZ 2023

    '''
    class CONUS:

        r'''
        THIS NESTED CLASS HOSTS THE IMAGES FOR CONUS AKA THE "LOWER-48"
        '''
            
        def plot_generic_real_time_mesoanalysis_no_METARs(parameter, plot_title, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table, color_table_title, color_table_start, color_table_stop, color_table_step, color_table_shrink, PSA_Boundary_Color):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. 

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()
            param = parameter

            if param == 'Wind_speed_gust_Analysis_height_above_ground' or param == 'Wind_speed_Analysis_height_above_ground' or param == 'Wind_speed_error_height_above_ground' or param == 'Wind_speed_gust_error_height_above_ground' or param == 'u-component_of_wind_Analysis_height_above_ground' or param == 'v-component_of_wind_Analysis_height_above_ground':

                data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_data(utc_time, param)
                data = data * 2.23694

            if param == 'Temperature_Analysis_height_above_ground' or param == 'Dewpoint_temperature_Analysis_height_above_ground' or param == 'Temperature_error_height_above_ground' or param == 'Dewpoint_temperature_error_height_above_ground':
                
                data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_data(utc_time, param)
                data = calc.unit_conversion.RTMA_Temperature_Data_or_Dewpoint_Data_Kelvin_to_Fahrenheit(data)
                

            else:
                data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_data(utc_time, param)
                
            plot_proj = data.metpy.cartopy_crs
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            PSAs = geometry.Predictive_Services_Areas.get_PSAs(PSA_Boundary_Color)

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(PSAs, linewidth=1.25)

            cs = ax.contourf(data.metpy.x, data.metpy.y, data, 
                             transform=data.metpy.cartopy_crs, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, alpha=0.5)

            cbar = fig.colorbar(cs, shrink=color_table_shrink)
            cbar.set_label(label=color_table_title, size=12, fontweight='bold')

            plt.title(plot_title + "\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + " | Image Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.045, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig


        def plot_generic_real_time_mesoanalysis_with_METARs(parameter, plot_title, western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table, color_table_title, color_table_start, color_table_stop, color_table_step, color_table_shrink, mask, PSA_Boundary_Color):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. 

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()
            param = parameter

            if param == 'Wind_speed_gust_Analysis_height_above_ground' or param == 'Wind_speed_Analysis_height_above_ground' or param == 'Wind_speed_error_height_above_ground' or param == 'Wind_speed_gust_error_height_above_ground' or param == 'u-component_of_wind_Analysis_height_above_ground' or param == 'v-component_of_wind_Analysis_height_above_ground':

               rtma_data, rtma_time, sfc_data, sfc_data_u_kt, sfc_data_v_kt, sfc_data_rh, sfc_data_mask, metar_time_revised, plot_proj = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.METARs.RTMA_Synced_With_METAR(param, utc_time, mask)
               rtma_data = rtma_data * 2.23694

            if param == 'Temperature_Analysis_height_above_ground' or param == 'Dewpoint_temperature_Analysis_height_above_ground' or param == 'Temperature_error_height_above_ground' or param == 'Dewpoint_temperature_error_height_above_ground':
                
                rtma_data, rtma_time, sfc_data, sfc_data_u_kt, sfc_data_v_kt, sfc_data_rh, sfc_data_mask, metar_time_revised, plot_proj = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.METARs.RTMA_Synced_With_METAR(param, utc_time, mask)
                rtma_data = calc.unit_conversion.RTMA_Temperature_Data_or_Dewpoint_Data_Kelvin_to_Fahrenheit(rtma_data)
                

            else:
               rtma_data, rtma_time, sfc_data, sfc_data_u_kt, sfc_data_v_kt, sfc_data_rh, sfc_data_mask, metar_time_revised, plot_proj = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.METARs.RTMA_Synced_With_METAR(param, utc_time, mask)
                
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            PSAs = geometry.Predictive_Services_Areas.get_PSAs(PSA_Boundary_Color)

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(PSAs, linewidth=1.25)

            cs = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(color_table_start, color_table_stop, color_table_step), cmap=color_table, alpha=0.5)

            cbar = fig.colorbar(cs, shrink=color_table_shrink)
            cbar.set_label(label=color_table_title, size=12, fontweight='bold')

            # Plots METAR
            stn = mpplots.StationPlot(ax, sfc_data['longitude'][sfc_data_mask].m, sfc_data['latitude'][sfc_data_mask].m,
                                     transform=ccrs.PlateCarree(), fontsize=11, zorder=10, clip_on=True)
            
            
            stn.plot_parameter('NW', sfc_data['air_temperature'].to('degF')[sfc_data_mask], color='red',
                              path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_parameter('SW', sfc_data['dew_point_temperature'].to('degF')[sfc_data_mask], color='blue',
                              path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_symbol('C', sfc_data['cloud_coverage'][sfc_data_mask], mpplots.sky_cover)
            
            stn.plot_parameter('E', sfc_data_rh.to('percent')[sfc_data_mask], color='lime',
                                path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_barb(sfc_data['u'][sfc_data_mask], sfc_data['v'][sfc_data_mask])

            plt.title(plot_title + "\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\n\nMETAR Observations\nValid: " + metar_time_revised.strftime('%m/%d/%Y %HZ') +"\n\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.045, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig



        def plot_relative_humidity_with_METARs(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink, mask):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. 

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time, sfc_data, sfc_data_u_kt, sfc_data_v_kt, sfc_data_rh, sfc_data_mask, metar_time_revised, plot_proj = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.METARs.RTMA_Relative_Humidity_Synced_With_METAR(utc_time, mask)
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(PSAs, linewidth=1.25)

            cs = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(0, 105, 5), cmap='YlGnBu', alpha=0.5)

            cbar = fig.colorbar(cs, shrink=color_table_shrink)
            cbar.set_label(label="Relative Humidity (%)", size=12, fontweight='bold')

            # Plots METAR
            stn = mpplots.StationPlot(ax, sfc_data['longitude'][sfc_data_mask].m, sfc_data['latitude'][sfc_data_mask].m,
                                     transform=ccrs.PlateCarree(), fontsize=11, zorder=10, clip_on=True)
            
            
            stn.plot_parameter('NW', sfc_data['air_temperature'].to('degF')[sfc_data_mask], color='red',
                              path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_parameter('SW', sfc_data['dew_point_temperature'].to('degF')[sfc_data_mask], color='darkorange',
                              path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_symbol('C', sfc_data['cloud_coverage'][sfc_data_mask], mpplots.sky_cover)
            
            stn.plot_parameter('E', sfc_data_rh.to('percent')[sfc_data_mask], color='lime',
                                path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_barb(sfc_data['u'][sfc_data_mask], sfc_data['v'][sfc_data_mask])

            plt.title("Real Time Mesoscale Analysis Relative Humidity\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\n\nMETAR Observations\nValid: " + metar_time_revised.strftime('%m/%d/%Y %HZ') + "\n\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.045, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig


        def plot_red_flag_relative_humidity_with_METARs(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink, mask):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. THIS PLOT FILTERS THE RELATIVE HUMIDITY DATASET TO ONLY PLOT WHERE THE RELATIVE HUMIDITY IS 15% OR LESS. 

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time, sfc_data, sfc_data_u_kt, sfc_data_v_kt, sfc_data_rh, sfc_data_mask, metar_time_revised, plot_proj = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.METARs.RTMA_Relative_Humidity_Synced_With_METAR(utc_time, mask)
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(PSAs, linewidth=1.25)

            cs = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', alpha=1)

            cbar = fig.colorbar(cs, shrink=color_table_shrink)
            cbar.set_label(label="Relative Humidity (%)", size=12, fontweight='bold')

            # Plots METAR
            stn = mpplots.StationPlot(ax, sfc_data['longitude'][sfc_data_mask].m, sfc_data['latitude'][sfc_data_mask].m,
                                     transform=ccrs.PlateCarree(), fontsize=11, zorder=10, clip_on=True)
            
            
            stn.plot_parameter('NW', sfc_data['air_temperature'].to('degF')[sfc_data_mask], color='red',
                              path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_parameter('SW', sfc_data['dew_point_temperature'].to('degF')[sfc_data_mask], color='darkorange',
                              path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_symbol('C', sfc_data['cloud_coverage'][sfc_data_mask], mpplots.sky_cover)
            
            stn.plot_parameter('E', sfc_data_rh.to('percent')[sfc_data_mask], color='lime',
                                path_effects=[withStroke(linewidth=1, foreground='black')])
            
            stn.plot_barb(sfc_data['u'][sfc_data_mask], sfc_data['v'][sfc_data_mask])

            plt.title("Real Time Mesoscale Analysis Red-Flag Relative Humidity (RH <=15%)\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\n\nMETAR Observations\nValid: " + metar_time_revised.strftime('%m/%d/%Y %HZ') + "\n\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.045, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig


        def plot_low_and_high_relative_humidity(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. THIS PLOT FILTERS THE RELATIVE HUMIDITY DATASET TO ONLY PLOT WHERE THE RELATIVE HUMIDITY IS 15% OR LESS. 

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_relative_humidity_data(utc_time)
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            plot_proj = rtma_data.metpy.cartopy_crs

            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(PSAs, linewidth=1.25)

            cs_low = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', alpha=1)

            cs_high = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(80, 101, 1), cmap='Greens', alpha=1)

            cbar_low = fig.colorbar(cs_low, location='left', shrink=color_table_shrink, pad=0.03)
            cbar_low.set_label(label="Low Relative Humidity (RH <= 15%)", size=12, fontweight='bold')

            cbar_high = fig.colorbar(cs_high, location='right', shrink=color_table_shrink, pad=0.03)
            cbar_high.set_label(label="High Relative Humidity (RH >= 80%)", size=12, fontweight='bold')


            plt.title("2.5km Real Time Mesoscale Analysis\nLow RH(<=15%) & High RH (RH >= 80%)\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.051, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig


        def plot_24_hour_relative_humidity_change(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. THIS PLOT COMPARES THE RELATIVE HUMIDITY FROM THE CURRENT TIME AND THE RELATIVE HUMIDITY FROM 24 HOURS AGO AND PLOTS THE 24 HOUR RELATIVE HUMIDITY CHANGE

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_rtma_relative_humidity_24_hour_difference_data(utc_time)
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            plot_proj = rtma_data.metpy.cartopy_crs

            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(PSAs, linewidth=1.25)

            cs = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(-60, 65, 5), cmap='BrBG', alpha=1)


            cbar = fig.colorbar(cs, shrink=color_table_shrink)
            cbar.set_label(label="Relative Humidity Change (%)", size=12, fontweight='bold')


            plt.title("24-Hour Relative Humidity Change (%)\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.051, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig


        def plot_24_hour_temperature_change(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. THIS PLOT COMPARES THE TEMPERATURE FROM THE CURRENT TIME AND THE TEMPERATURE FROM 24 HOURS AGO AND PLOTS THE 24 HOUR TEMPERATURE CHANGE

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_rtma_data_24_hour_difference(utc_time, 'Temperature_Analysis_height_above_ground')

            rtma_data = calc.unit_conversion.Temperature_Or_Dewpoint_Change_to_Fahrenheit(rtma_data)
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            plot_proj = rtma_data.metpy.cartopy_crs

            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(PSAs, linewidth=1.25)

            cs = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(-20, 21, 1), cmap='seismic', alpha=1)


            cbar = fig.colorbar(cs, shrink=color_table_shrink)
            cbar.set_label(label="Temperature Change (\N{DEGREE SIGN}F)", size=12, fontweight='bold')


            plt.title("24-Hour Temperature Change (\N{DEGREE SIGN}F)\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.051, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig


        def plot_24_hour_wind_speed_change(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. THIS PLOT COMPARES THE WIND SPEED FROM THE CURRENT TIME AND THE WIND SPEED FROM 24 HOURS AGO AND PLOTS THE 24 HOUR WIND SPEED CHANGE

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_rtma_data_24_hour_difference(utc_time, 'Wind_speed_Analysis_height_above_ground')

            rtma_data = rtma_data * 2.23694
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')

            plot_proj = rtma_data.metpy.cartopy_crs

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(PSAs, linewidth=1.25)

            cs = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(-30, 31, 1), cmap='PuOr_r', alpha=1)


            cbar = fig.colorbar(cs, shrink=color_table_shrink)
            cbar.set_label(label="Wind Speed Change (MPH)", size=12, fontweight='bold')


            plt.title("24-Hour Wind Speed Change (MPH)\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.051, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig
            

        def plot_current_frost_freeze_areas(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. THIS PLOT SHOWS THE CURRENT AREAS EXPERIENCING BELOW FREEZING TEMPERATURES SINCE FROST/FREEZE CAN TURN LIVE FUEL INTO DEAD FUEL WHICH CAN ULTIMATELY LEAD TO MORE SUCCEPTABLE FUELS FOR WILDFIRE.

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_data(utc_time, 'Temperature_Analysis_height_above_ground')

            rtma_data = calc.unit_conversion.RTMA_Temperature_Data_or_Dewpoint_Data_Kelvin_to_Fahrenheit(rtma_data)
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')

            plot_proj = rtma_data.metpy.cartopy_crs

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(PSAs, linewidth=1.25)

            cs = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(-10, 33, 1), cmap='cool_r', alpha=1)


            cbar = fig.colorbar(cs, shrink=color_table_shrink)
            cbar.set_label(label="Temperature (\N{DEGREE SIGN}F)", size=12, fontweight='bold')


            plt.title("Current Frost & Freeze Areas (T <= 32\N{DEGREE SIGN}F)\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.051, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig


        def plot_red_flag_criteria_based_on_sustained_winds(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. THIS PLOT COMPARES THE AREAS OF RED-FLAG RELATIVE HUMIDITY CRITERIA WITH RED-FLAG WIND CRITERIA BASED ON SUSTAINED WINDS. 

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_relative_humidity_data(utc_time)

            rtma_wind, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_data(utc_time, 'Wind_speed_Analysis_height_above_ground')

            rtma_wind = rtma_wind * 2.23694
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')

            plot_proj = rtma_data.metpy.cartopy_crs

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(PSAs, linewidth=1.25)

            cs_rh = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', alpha=0.5)

            cs_wind = ax.contourf(rtma_wind.metpy.x, rtma_wind.metpy.y, rtma_wind, 
                             transform=rtma_wind.metpy.cartopy_crs, levels=np.arange(25, 100, 5), cmap='BuPu', alpha=0.5)


            cbar_rh = fig.colorbar(cs_rh, location='left', shrink=color_table_shrink, pad=0.03)
            cbar_rh.set_label(label="Relative Humidity (%)", size=12, fontweight='bold')

            cbar_wind = fig.colorbar(cs_wind, location='right', shrink=color_table_shrink, pad=0.03)
            cbar_wind.set_label(label="Wind Speed (MPH)", size=12, fontweight='bold')


            plt.title("Red-Flag Warning Conditions (RH <= 15% and Wind Speed >= 25 MPH)\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.051, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig


        def plot_red_flag_criteria_based_on_wind_gusts(western_bound, eastern_bound, southern_bound, northern_bound, central_longitude, central_latitude, first_standard_parallel, second_standard_parallel, fig_x_length, fig_y_length, color_table_shrink):

            r'''
            THIS FUNCTION CREATES A CUSTOMIZED PLOT OF THE 2.5KM X 2.5KM REAL TIME MESOSCALE ANALYSIS DATA FOR ANY AREA INSIDE OF CONUS. THIS PLOT COMPARES THE AREAS OF RED-FLAG RELATIVE HUMIDITY CRITERIA WITH RED-FLAG WIND CRITERIA BASED ON WIND GUSTS. 

            (C) METEOROLOGIST ERIC J. DREWITZ 2023
            
            '''


            local_time, utc_time = standard.plot_creation_time()

            rtma_data, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_relative_humidity_data(utc_time)

            rtma_wind, rtma_time = da.UCAR_THREDDS_SERVER_OPENDAP_Downloads.CONUS.get_current_rtma_data(utc_time, 'Wind_speed_gust_Analysis_height_above_ground')

            rtma_wind = rtma_wind * 2.23694
            
            mapcrs = ccrs.LambertConformal(central_longitude=central_longitude, central_latitude=central_latitude, standard_parallels=(first_standard_parallel,second_standard_parallel))
            datacrs = ccrs.PlateCarree()

            PSAs = geometry.Predictive_Services_Areas.get_PSAs('black')

            plot_proj = rtma_data.metpy.cartopy_crs

            fig = plt.figure(figsize=(fig_x_length, fig_y_length))

            ax = fig.add_subplot(1, 1, 1, projection=plot_proj)
            ax.set_extent((western_bound, eastern_bound, southern_bound, northern_bound), crs=ccrs.PlateCarree())
            ax.add_feature(PSAs, linewidth=1.25)

            cs_rh = ax.contourf(rtma_data.metpy.x, rtma_data.metpy.y, rtma_data, 
                             transform=rtma_data.metpy.cartopy_crs, levels=np.arange(0, 16, 1), cmap='YlOrBr_r', alpha=0.5)

            cs_wind = ax.contourf(rtma_wind.metpy.x, rtma_wind.metpy.y, rtma_wind, 
                             transform=rtma_wind.metpy.cartopy_crs, levels=np.arange(25, 100, 5), cmap='BuPu', alpha=0.5)


            cbar_rh = fig.colorbar(cs_rh, location='left', shrink=color_table_shrink, pad=0.03)
            cbar_rh.set_label(label="Relative Humidity (%)", size=12, fontweight='bold')

            cbar_wind = fig.colorbar(cs_wind, location='right', shrink=color_table_shrink, pad=0.03)
            cbar_wind.set_label(label="Wind Gust (MPH)", size=12, fontweight='bold')


            plt.title("Red-Flag Warning Conditions (RH <= 15% and Wind Gust >= 25 MPH)\nValid: " + rtma_time.strftime('%m/%d/%Y %HZ') + "\nImage Created: " + utc_time.strftime('%m/%d/%Y %H:%MZ'), fontweight='bold')
            
            ax.text(0.5, -0.051, "Plot Created With FireWxPy (C) Eric J. Drewitz 2023\nData Source: thredds.ucar.edu", fontweight='bold', horizontalalignment='center',
           verticalalignment='bottom', transform=ax.transAxes)

            return fig
            
